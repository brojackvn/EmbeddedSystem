
HelloSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ac  080078ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b4  080078b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080078bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000704  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000714  20000714  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002678c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b60  00000000  00000000  000467cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  0004b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e78  00000000  00000000  0004d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b7c  00000000  00000000  0004f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000255ad  00000000  00000000  00077d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f398d  00000000  00000000  0009d309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00190c96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aa4  00000000  00000000  00190ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007870 	.word	0x08007870

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007870 	.word	0x08007870

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f001 f8c5 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f859 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fafd 	bl	8000b28 <MX_GPIO_Init>
  MX_CRC_Init();
 800052e:	f000 f8bf 	bl	80006b0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000532:	f000 f8d1 	bl	80006d8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000536:	f000 faa7 	bl	8000a88 <MX_FMC_Init>
  MX_I2C3_Init();
 800053a:	f000 f8ff 	bl	800073c <MX_I2C3_Init>
  MX_LTDC_Init();
 800053e:	f000 f93d 	bl	80007bc <MX_LTDC_Init>
  MX_SPI5_Init();
 8000542:	f000 f9bb 	bl	80008bc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000546:	f000 f9ef 	bl	8000928 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800054a:	f000 fa73 	bl	8000a34 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 800054e:	f000 fa3b 	bl	80009c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <main+0xac>)
 8000554:	f004 fbdc 	bl	8004d10 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <main+0xb0>)
 8000560:	f001 fdba 	bl	80020d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056a:	4818      	ldr	r0, [pc, #96]	; (80005cc <main+0xb0>)
 800056c:	f001 fdb4 	bl	80020d8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	GPIO_PinState UserButtonState = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 8000570:	2101      	movs	r1, #1
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <main+0xb4>)
 8000574:	f001 fd98 	bl	80020a8 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]
	if (UserButtonState == GPIO_PIN_SET) {
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d106      	bne.n	8000590 <main+0x74>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Turn on LED4
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <main+0xb0>)
 800058a:	f001 fda5 	bl	80020d8 <HAL_GPIO_WritePin>
 800058e:	e005      	b.n	800059c <main+0x80>
	} else {
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); // Turn off LED4
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <main+0xb0>)
 8000598:	f001 fd9e 	bl	80020d8 <HAL_GPIO_WritePin>
	}
	char buffer [10] = "IT4210ED\r\n";
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <main+0xb8>)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a2:	c303      	stmia	r3!, {r0, r1}
 80005a4:	801a      	strh	r2, [r3, #0]
	HAL_Delay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f001 f8c3 	bl	8001734 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 2);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe1d 	bl	80001f0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	2302      	movs	r3, #2
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0xbc>)
 80005c0:	f005 f825 	bl	800560e <HAL_UART_Transmit>
  {
 80005c4:	e7d4      	b.n	8000570 <main+0x54>
 80005c6:	bf00      	nop
 80005c8:	20000210 	.word	0x20000210
 80005cc:	40021800 	.word	0x40021800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	08007888 	.word	0x08007888
 80005d8:	20000258 	.word	0x20000258

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 f938 	bl	8007860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fbbe 	bl	8003de4 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066e:	f000 fb89 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fe1f 	bl	80042d4 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800069c:	f000 fb72 	bl	8000d84 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CRC_Init+0x20>)
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <MX_CRC_Init+0x24>)
 80006b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_CRC_Init+0x20>)
 80006bc:	f001 f940 	bl	8001940 <HAL_CRC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006c6:	f000 fb5d 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000002c 	.word	0x2000002c
 80006d4:	40023000 	.word	0x40023000

080006d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_DMA2D_Init+0x60>)
 80006e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_DMA2D_Init+0x5c>)
 800070e:	f001 f933 	bl	8001978 <HAL_DMA2D_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000718:	f000 fb34 	bl	8000d84 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800071c:	2101      	movs	r1, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000720:	f001 fa84 	bl	8001c2c <HAL_DMA2D_ConfigLayer>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800072a:	f000 fb2b 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000034 	.word	0x20000034
 8000738:	4002b000 	.word	0x4002b000

0800073c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C3_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_I2C3_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C3_Init+0x74>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_I2C3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_I2C3_Init+0x74>)
 800077a:	f002 fe0b 	bl	8003394 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fafe 	bl	8000d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C3_Init+0x74>)
 800078c:	f002 ff46 	bl	800361c <HAL_I2CEx_ConfigAnalogFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 faf5 	bl	8000d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_I2C3_Init+0x74>)
 800079e:	f002 ff79 	bl	8003694 <HAL_I2CEx_ConfigDigitalFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 faec 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000074 	.word	0x20000074
 80007b4:	40005c00 	.word	0x40005c00
 80007b8:	000186a0 	.word	0x000186a0

080007bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2234      	movs	r2, #52	; 0x34
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 f849 	bl	8007860 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007ce:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007d0:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <MX_LTDC_Init+0xfc>)
 80007d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007d4:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007ec:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007ee:	2209      	movs	r2, #9
 80007f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007f2:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_LTDC_Init+0xf8>)
 80007fa:	221d      	movs	r2, #29
 80007fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000800:	2203      	movs	r2, #3
 8000802:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000806:	f240 120d 	movw	r2, #269	; 0x10d
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800080e:	f240 1243 	movw	r2, #323	; 0x143
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000816:	f240 1217 	movw	r2, #279	; 0x117
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800081e:	f240 1247 	movw	r2, #327	; 0x147
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_LTDC_Init+0xf8>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800083c:	481d      	ldr	r0, [pc, #116]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800083e:	f002 ff69 	bl	8003714 <HAL_LTDC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 fa9c 	bl	8000d84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000850:	23f0      	movs	r3, #240	; 0xf0
 8000852:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000858:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800085c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000862:	23ff      	movs	r3, #255	; 0xff
 8000864:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800086a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800086e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000870:	2307      	movs	r3, #7
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000874:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800087a:	23f0      	movs	r3, #240	; 0xf0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800087e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_LTDC_Init+0xf8>)
 800089e:	f003 f8cb 	bl	8003a38 <HAL_LTDC_ConfigLayer>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008a8:	f000 fa6c 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000c8 	.word	0x200000c8
 80008b8:	40016800 	.word	0x40016800

080008bc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI5_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI5_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI5_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI5_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI5_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI5_Init+0x64>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI5_Init+0x64>)
 80008f0:	2218      	movs	r2, #24
 80008f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI5_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI5_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI5_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI5_Init+0x64>)
 800090e:	f004 f927 	bl	8004b60 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 fa34 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000170 	.word	0x20000170
 8000924:	40015000 	.word	0x40015000

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000946:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <MX_TIM1_Init+0x9c>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000972:	f004 f97e 	bl	8004c72 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 fa02 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM1_Init+0x98>)
 800098e:	f004 fb37 	bl	8005000 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000998:	f000 f9f4 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM1_Init+0x98>)
 80009aa:	f004 fd53 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009b4:	f000 f9e6 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001c8 	.word	0x200001c8
 80009c4:	40010000 	.word	0x40010000

080009c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_TIM7_Init+0x64>)
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_TIM7_Init+0x68>)
 80009da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_TIM7_Init+0x64>)
 80009de:	2259      	movs	r2, #89	; 0x59
 80009e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_TIM7_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_TIM7_Init+0x64>)
 80009ea:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80009ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_TIM7_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_TIM7_Init+0x64>)
 80009f8:	f004 f93b 	bl	8004c72 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000a02:	f000 f9bf 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_TIM7_Init+0x64>)
 8000a14:	f004 fd1e 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a1e:	f000 f9b1 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000210 	.word	0x20000210
 8000a30:	40001400 	.word	0x40001400

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART1_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f004 fd82 	bl	8005574 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f985 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000258 	.word	0x20000258
 8000a84:	40011000 	.word	0x40011000

08000a88 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_FMC_Init+0x98>)
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <MX_FMC_Init+0x9c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_FMC_Init+0x98>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_FMC_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_FMC_Init+0x98>)
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_FMC_Init+0x98>)
 8000aba:	2210      	movs	r2, #16
 8000abc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_FMC_Init+0x98>)
 8000ac0:	2240      	movs	r2, #64	; 0x40
 8000ac2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_FMC_Init+0x98>)
 8000ac6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000aca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_FMC_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_FMC_Init+0x98>)
 8000ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_FMC_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_FMC_Init+0x98>)
 8000ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000af4:	2307      	movs	r3, #7
 8000af6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000af8:	2303      	movs	r3, #3
 8000afa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_FMC_Init+0x98>)
 8000b0a:	f003 fff5 	bl	8004af8 <HAL_SDRAM_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b14:	f000 f936 	bl	8000d84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000029c 	.word	0x2000029c
 8000b24:	a0000140 	.word	0xa0000140

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	4b81      	ldr	r3, [pc, #516]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a80      	ldr	r2, [pc, #512]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b7e      	ldr	r3, [pc, #504]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	4b7a      	ldr	r3, [pc, #488]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a79      	ldr	r2, [pc, #484]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b77      	ldr	r3, [pc, #476]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a72      	ldr	r2, [pc, #456]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b70      	ldr	r3, [pc, #448]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b6c      	ldr	r3, [pc, #432]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a6b      	ldr	r2, [pc, #428]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b69      	ldr	r3, [pc, #420]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b65      	ldr	r3, [pc, #404]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b5e      	ldr	r3, [pc, #376]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a5d      	ldr	r2, [pc, #372]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b5b      	ldr	r3, [pc, #364]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a56      	ldr	r2, [pc, #344]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2116      	movs	r1, #22
 8000c22:	484a      	ldr	r0, [pc, #296]	; (8000d4c <MX_GPIO_Init+0x224>)
 8000c24:	f001 fa58 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	4848      	ldr	r0, [pc, #288]	; (8000d50 <MX_GPIO_Init+0x228>)
 8000c2e:	f001 fa53 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c38:	4846      	ldr	r0, [pc, #280]	; (8000d54 <MX_GPIO_Init+0x22c>)
 8000c3a:	f001 fa4d 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c44:	4844      	ldr	r0, [pc, #272]	; (8000d58 <MX_GPIO_Init+0x230>)
 8000c46:	f001 fa47 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c4a:	2316      	movs	r3, #22
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	483a      	ldr	r0, [pc, #232]	; (8000d4c <MX_GPIO_Init+0x224>)
 8000c62:	f001 f875 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c66:	2301      	movs	r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4835      	ldr	r0, [pc, #212]	; (8000d50 <MX_GPIO_Init+0x228>)
 8000c7a:	f001 f869 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c7e:	f248 0306 	movw	r3, #32774	; 0x8006
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	482e      	ldr	r0, [pc, #184]	; (8000d50 <MX_GPIO_Init+0x228>)
 8000c96:	f001 f85b 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4827      	ldr	r0, [pc, #156]	; (8000d50 <MX_GPIO_Init+0x228>)
 8000cb2:	f001 f84d 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4820      	ldr	r0, [pc, #128]	; (8000d4c <MX_GPIO_Init+0x224>)
 8000ccc:	f001 f840 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481e      	ldr	r0, [pc, #120]	; (8000d5c <MX_GPIO_Init+0x234>)
 8000ce4:	f001 f834 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4815      	ldr	r0, [pc, #84]	; (8000d54 <MX_GPIO_Init+0x22c>)
 8000cfe:	f001 f827 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_GPIO_Init+0x22c>)
 8000d1c:	f001 f818 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d20:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_GPIO_Init+0x230>)
 8000d3a:	f001 f809 	bl	8001d50 <HAL_GPIO_Init>

}
 8000d3e:	bf00      	nop
 8000d40:	3738      	adds	r7, #56	; 0x38
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	40021800 	.word	0x40021800
 8000d5c:	40020400 	.word	0x40020400

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d72:	f000 fcbf 	bl	80016f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40001000 	.word	0x40001000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_MspInit+0x54>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_MspInit+0x54>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x54>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_MspInit+0x54>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_MspInit+0x54>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_MspInit+0x54>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	f06f 0001 	mvn.w	r0, #1
 8000dd6:	f000 fd89 	bl	80018ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_CRC_MspInit+0x3c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10d      	bne.n	8000e16 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_CRC_MspInit+0x40>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_CRC_MspInit+0x40>)
 8000e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_CRC_MspInit+0x40>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023000 	.word	0x40023000
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_DMA2D_MspInit+0x48>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d115      	bne.n	8000e6a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_DMA2D_MspInit+0x4c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_DMA2D_MspInit+0x4c>)
 8000e48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_DMA2D_MspInit+0x4c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	205a      	movs	r0, #90	; 0x5a
 8000e60:	f000 fd44 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e64:	205a      	movs	r0, #90	; 0x5a
 8000e66:	f000 fd5d 	bl	8001924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	4002b000 	.word	0x4002b000
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <HAL_I2C_MspInit+0xc4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d14b      	bne.n	8000f36 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4815      	ldr	r0, [pc, #84]	; (8000f48 <HAL_I2C_MspInit+0xcc>)
 8000ef4:	f000 ff2c 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efe:	2312      	movs	r3, #18
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <HAL_I2C_MspInit+0xd0>)
 8000f16:	f000 ff1b 	bl	8001d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40005c00 	.word	0x40005c00
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09a      	sub	sp, #104	; 0x68
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	2230      	movs	r2, #48	; 0x30
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fc75 	bl	8007860 <memset>
  if(hltdc->Instance==LTDC)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a85      	ldr	r2, [pc, #532]	; (8001190 <HAL_LTDC_MspInit+0x240>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	f040 8102 	bne.w	8001186 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f82:	2308      	movs	r3, #8
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fbee 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fa2:	f7ff feef 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
 8000faa:	4b7a      	ldr	r3, [pc, #488]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a79      	ldr	r2, [pc, #484]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b77      	ldr	r3, [pc, #476]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fbe:	623b      	str	r3, [r7, #32]
 8000fc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	4b73      	ldr	r3, [pc, #460]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a72      	ldr	r2, [pc, #456]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	f043 0320 	orr.w	r3, r3, #32
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b70      	ldr	r3, [pc, #448]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0320 	and.w	r3, r3, #32
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	4b6c      	ldr	r3, [pc, #432]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a6b      	ldr	r2, [pc, #428]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b69      	ldr	r3, [pc, #420]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	4b65      	ldr	r3, [pc, #404]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a64      	ldr	r2, [pc, #400]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a5d      	ldr	r2, [pc, #372]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a56      	ldr	r2, [pc, #344]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b50      	ldr	r3, [pc, #320]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <HAL_LTDC_MspInit+0x244>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107c:	230e      	movs	r3, #14
 800107e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001084:	4619      	mov	r1, r3
 8001086:	4844      	ldr	r0, [pc, #272]	; (8001198 <HAL_LTDC_MspInit+0x248>)
 8001088:	f000 fe62 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800108c:	f641 0358 	movw	r3, #6232	; 0x1858
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109e:	230e      	movs	r3, #14
 80010a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a6:	4619      	mov	r1, r3
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <HAL_LTDC_MspInit+0x24c>)
 80010aa:	f000 fe51 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010ae:	2303      	movs	r3, #3
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010be:	2309      	movs	r3, #9
 80010c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c6:	4619      	mov	r1, r3
 80010c8:	4835      	ldr	r0, [pc, #212]	; (80011a0 <HAL_LTDC_MspInit+0x250>)
 80010ca:	f000 fe41 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e0:	230e      	movs	r3, #14
 80010e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e8:	4619      	mov	r1, r3
 80010ea:	482d      	ldr	r0, [pc, #180]	; (80011a0 <HAL_LTDC_MspInit+0x250>)
 80010ec:	f000 fe30 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010f0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001102:	230e      	movs	r3, #14
 8001104:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800110a:	4619      	mov	r1, r3
 800110c:	4825      	ldr	r0, [pc, #148]	; (80011a4 <HAL_LTDC_MspInit+0x254>)
 800110e:	f000 fe1f 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001112:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001116:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001124:	230e      	movs	r3, #14
 8001126:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001128:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112c:	4619      	mov	r1, r3
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <HAL_LTDC_MspInit+0x258>)
 8001130:	f000 fe0e 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001134:	2348      	movs	r3, #72	; 0x48
 8001136:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001144:	230e      	movs	r3, #14
 8001146:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800114c:	4619      	mov	r1, r3
 800114e:	4817      	ldr	r0, [pc, #92]	; (80011ac <HAL_LTDC_MspInit+0x25c>)
 8001150:	f000 fdfe 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001154:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001158:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001166:	2309      	movs	r3, #9
 8001168:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <HAL_LTDC_MspInit+0x254>)
 8001172:	f000 fded 	bl	8001d50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	2058      	movs	r0, #88	; 0x58
 800117c:	f000 fbb6 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001180:	2058      	movs	r0, #88	; 0x58
 8001182:	f000 fbcf 	bl	8001924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3768      	adds	r7, #104	; 0x68
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40016800 	.word	0x40016800
 8001194:	40023800 	.word	0x40023800
 8001198:	40021400 	.word	0x40021400
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_SPI_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12c      	bne.n	800122c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_SPI_MspInit+0x88>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_SPI_MspInit+0x88>)
 80011dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_SPI_MspInit+0x88>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_SPI_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_SPI_MspInit+0x88>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_SPI_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800120a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800121c:	2305      	movs	r3, #5
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_SPI_MspInit+0x8c>)
 8001228:	f000 fd92 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40015000 	.word	0x40015000
 8001238:	40023800 	.word	0x40023800
 800123c:	40021400 	.word	0x40021400

08001240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_TIM_Base_MspInit+0x70>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10e      	bne.n	8001270 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_TIM_Base_MspInit+0x74>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_TIM_Base_MspInit+0x74>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_TIM_Base_MspInit+0x74>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800126e:	e01a      	b.n	80012a6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_TIM_Base_MspInit+0x78>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d115      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_TIM_Base_MspInit+0x74>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <HAL_TIM_Base_MspInit+0x74>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_TIM_Base_MspInit+0x74>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2105      	movs	r1, #5
 800129a:	2037      	movs	r0, #55	; 0x37
 800129c:	f000 fb26 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012a0:	2037      	movs	r0, #55	; 0x37
 80012a2:	f000 fb3f 	bl	8001924 <HAL_NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40001400 	.word	0x40001400

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <HAL_UART_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12c      	bne.n	8001338 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_UART_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_UART_MspInit+0x88>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_UART_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001316:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_UART_MspInit+0x8c>)
 8001334:	f000 fd0c 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40011000 	.word	0x40011000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <HAL_FMC_MspInit+0x104>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d16f      	bne.n	8001448 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_FMC_MspInit+0x104>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <HAL_FMC_MspInit+0x108>)
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	4a37      	ldr	r2, [pc, #220]	; (8001454 <HAL_FMC_MspInit+0x108>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6393      	str	r3, [r2, #56]	; 0x38
 800137e:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_FMC_MspInit+0x108>)
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800138a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800138e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800139c:	230c      	movs	r3, #12
 800139e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	482c      	ldr	r0, [pc, #176]	; (8001458 <HAL_FMC_MspInit+0x10c>)
 80013a6:	f000 fcd3 	bl	8001d50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013aa:	2301      	movs	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4826      	ldr	r0, [pc, #152]	; (800145c <HAL_FMC_MspInit+0x110>)
 80013c4:	f000 fcc4 	bl	8001d50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80013cc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	481f      	ldr	r0, [pc, #124]	; (8001460 <HAL_FMC_MspInit+0x114>)
 80013e4:	f000 fcb4 	bl	8001d50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80013e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013ec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fa:	230c      	movs	r3, #12
 80013fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <HAL_FMC_MspInit+0x118>)
 8001404:	f000 fca4 	bl	8001d50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001408:	f24c 7303 	movw	r3, #50947	; 0xc703
 800140c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141a:	230c      	movs	r3, #12
 800141c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <HAL_FMC_MspInit+0x11c>)
 8001424:	f000 fc94 	bl	8001d50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001428:	2360      	movs	r3, #96	; 0x60
 800142a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001438:	230c      	movs	r3, #12
 800143a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <HAL_FMC_MspInit+0x120>)
 8001442:	f000 fc85 	bl	8001d50 <HAL_GPIO_Init>
 8001446:	e000      	b.n	800144a <HAL_FMC_MspInit+0xfe>
    return;
 8001448:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200002d0 	.word	0x200002d0
 8001454:	40023800 	.word	0x40023800
 8001458:	40021400 	.word	0x40021400
 800145c:	40020800 	.word	0x40020800
 8001460:	40021800 	.word	0x40021800
 8001464:	40021000 	.word	0x40021000
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001478:	f7ff ff68 	bl	800134c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_InitTick+0xe4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_InitTick+0xe4>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <HAL_InitTick+0xe4>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014b0:	f107 0210 	add.w	r2, r7, #16
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 f92a 	bl	8004714 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ca:	f003 f8fb 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 80014ce:	6378      	str	r0, [r7, #52]	; 0x34
 80014d0:	e004      	b.n	80014dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014d2:	f003 f8f7 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 80014d6:	4603      	mov	r3, r0
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_InitTick+0xe8>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	3b01      	subs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_InitTick+0xec>)
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <HAL_InitTick+0xf0>)
 80014ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_InitTick+0xec>)
 80014f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_InitTick+0xec>)
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_InitTick+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_InitTick+0xec>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_InitTick+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001510:	4817      	ldr	r0, [pc, #92]	; (8001570 <HAL_InitTick+0xec>)
 8001512:	f003 fbae 	bl	8004c72 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800151c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11b      	bne.n	800155c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001524:	4812      	ldr	r0, [pc, #72]	; (8001570 <HAL_InitTick+0xec>)
 8001526:	f003 fbf3 	bl	8004d10 <HAL_TIM_Base_Start_IT>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f000 f9f3 	bl	8001924 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d808      	bhi.n	8001556 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	2036      	movs	r0, #54	; 0x36
 800154a:	f000 f9cf 	bl	80018ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_InitTick+0xf4>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e002      	b.n	800155c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800155c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001560:	4618      	mov	r0, r3
 8001562:	3738      	adds	r7, #56	; 0x38
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	431bde83 	.word	0x431bde83
 8001570:	200002d4 	.word	0x200002d4
 8001574:	40001000 	.word	0x40001000
 8001578:	20000004 	.word	0x20000004

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <TIM6_DAC_IRQHandler+0x34>)
 80015ae:	f003 fc1f 	bl	8004df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  TimerCount++;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <TIM6_DAC_IRQHandler+0x38>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <TIM6_DAC_IRQHandler+0x38>)
 80015ba:	6013      	str	r3, [r2, #0]
  if (TimerCount >= 500) {
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <TIM6_DAC_IRQHandler+0x38>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015c4:	db07      	blt.n	80015d6 <TIM6_DAC_IRQHandler+0x2e>
	  TimerCount = 0;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <TIM6_DAC_IRQHandler+0x38>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // toggle LED3
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <TIM6_DAC_IRQHandler+0x3c>)
 80015d2:	f000 fd9a 	bl	800210a <HAL_GPIO_TogglePin>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002d4 	.word	0x200002d4
 80015e0:	2000031c 	.word	0x2000031c
 80015e4:	40021800 	.word	0x40021800

080015e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM7_IRQHandler+0x10>)
 80015ee:	f003 fbff 	bl	8004df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000210 	.word	0x20000210

080015fc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <OTG_HS_IRQHandler+0x10>)
 8001602:	f000 fd9c 	bl	800213e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000410 	.word	0x20000410

08001610 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <LTDC_IRQHandler+0x10>)
 8001616:	f002 f94d 	bl	80038b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000c8 	.word	0x200000c8

08001624 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <DMA2D_IRQHandler+0x10>)
 800162a:	f000 f9ee 	bl	8001a0a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000034 	.word	0x20000034

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f006 f8b7 	bl	80077fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7fe ff45 	bl	800051c <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001694:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016a0:	080078bc 	.word	0x080078bc
  ldr r2, =_sbss
 80016a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016a8:	20000714 	.word	0x20000714

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f8fc 	bl	80018d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fed0 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fb54 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	20000320 	.word	0x20000320

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000320 	.word	0x20000320

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff4c 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fe:	f7ff ff61 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001902:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7ff ffb1 	bl	8001870 <NVIC_EncodePriority>
 800190e:	4602      	mov	r2, r0
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff80 	bl	800181c <__NVIC_SetPriority>
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff54 	bl	80017e0 <__NVIC_EnableIRQ>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	795b      	ldrb	r3, [r3, #5]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fa40 	bl	8000de8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e03b      	b.n	8001a02 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fa44 	bl	8000e2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c8:	f023 0107 	bic.w	r1, r3, #7
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68d1      	ldr	r1, [r2, #12]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d026      	beq.n	8001a7a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d021      	beq.n	8001a7a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a44:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d026      	beq.n	8001ad2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d021      	beq.n	8001ad2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d026      	beq.n	8001b2a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d021      	beq.n	8001b2a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2208      	movs	r2, #8
 8001afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f853 	bl	8001c02 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d024      	beq.n	8001bb0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01f      	beq.n	8001bb0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2202      	movs	r2, #2
 8001b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01f      	beq.n	8001bfa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01a      	beq.n	8001bfa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f80e 	bl	8001c16 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_DMA2D_ConfigLayer+0x20>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e079      	b.n	8001d40 <HAL_DMA2D_ConfigLayer+0x114>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	3318      	adds	r3, #24
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_DMA2D_ConfigLayer+0x120>)
 8001c78:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b0a      	cmp	r3, #10
 8001c80:	d003      	beq.n	8001c8a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	d107      	bne.n	8001c9a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e005      	b.n	8001ca6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	061b      	lsls	r3, r3, #24
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d120      	bne.n	8001cee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	ea02 0103 	and.w	r1, r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	d003      	beq.n	8001cde <HAL_DMA2D_ConfigLayer+0xb2>
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b09      	cmp	r3, #9
 8001cdc:	d127      	bne.n	8001d2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
 8001cec:	e01f      	b.n	8001d2e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	ea02 0103 	and.w	r1, r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b0a      	cmp	r3, #10
 8001d16:	d003      	beq.n	8001d20 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d106      	bne.n	8001d2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d2c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	ff03000f 	.word	0xff03000f

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e177      	b.n	800205c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	f040 8166 	bne.w	8002056 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d005      	beq.n	8001da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d130      	bne.n	8001e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 0201 	and.w	r2, r3, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d017      	beq.n	8001e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d123      	bne.n	8001e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	69b9      	ldr	r1, [r7, #24]
 8001e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80c0 	beq.w	8002056 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a65      	ldr	r2, [pc, #404]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef2:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_GPIO_Init+0x328>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_GPIO_Init+0x32c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d037      	beq.n	8001f8e <HAL_GPIO_Init+0x23e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_GPIO_Init+0x330>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_GPIO_Init+0x23a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x334>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x236>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a55      	ldr	r2, [pc, #340]	; (8002088 <HAL_GPIO_Init+0x338>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x232>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_GPIO_Init+0x33c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x22e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a53      	ldr	r2, [pc, #332]	; (8002090 <HAL_GPIO_Init+0x340>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x22a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_GPIO_Init+0x344>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x226>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a51      	ldr	r2, [pc, #324]	; (8002098 <HAL_GPIO_Init+0x348>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x222>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_GPIO_Init+0x34c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x21e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <HAL_GPIO_Init+0x350>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x21a>
 8001f66:	2309      	movs	r3, #9
 8001f68:	e012      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	e010      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e00e      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa0:	4935      	ldr	r1, [pc, #212]	; (8002078 <HAL_GPIO_Init+0x328>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd2:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ffc:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_GPIO_Init+0x354>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3301      	adds	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	f67f ae84 	bls.w	8001d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40013800 	.word	0x40013800
 800207c:	40020000 	.word	0x40020000
 8002080:	40020400 	.word	0x40020400
 8002084:	40020800 	.word	0x40020800
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40021000 	.word	0x40021000
 8002090:	40021400 	.word	0x40021400
 8002094:	40021800 	.word	0x40021800
 8002098:	40021c00 	.word	0x40021c00
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022400 	.word	0x40022400
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e001      	b.n	80020ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f4:	e003      	b.n	80020fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211c:	887a      	ldrh	r2, [r7, #2]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	041a      	lsls	r2, r3, #16
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43d9      	mvns	r1, r3
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	400b      	ands	r3, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f003 ff86 	bl	8006066 <USB_GetMode>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 80f6 	bne.w	800234e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 ff6a 	bl	8006040 <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80ec 	beq.w	800234c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 ff61 	bl	8006040 <USB_ReadInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002188:	d104      	bne.n	8002194 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002192:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 ff51 	bl	8006040 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a8:	d104      	bne.n	80021b4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 ff41 	bl	8006040 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c8:	d104      	bne.n	80021d4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021d2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 ff31 	bl	8006040 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d103      	bne.n	80021f0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2202      	movs	r2, #2
 80021ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 ff23 	bl	8006040 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002204:	d11c      	bne.n	8002240 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800220e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002220:	2110      	movs	r1, #16
 8002222:	6938      	ldr	r0, [r7, #16]
 8002224:	f003 fe50 	bl	8005ec8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002228:	6938      	ldr	r0, [r7, #16]
 800222a:	f003 fe81 	bl	8005f30 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f003 ff24 	bl	8006082 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f005 fa5a 	bl	80076f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fefb 	bl	8006040 <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d102      	bne.n	800225c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f001 f829 	bl	80032ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 feed 	bl	8006040 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d106      	bne.n	800227e <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f005 fa23 	bl	80076bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2208      	movs	r2, #8
 800227c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fedc 	bl	8006040 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b10      	cmp	r3, #16
 8002290:	d101      	bne.n	8002296 <HAL_HCD_IRQHandler+0x158>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_HCD_IRQHandler+0x15a>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d012      	beq.n	80022c2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0210 	bic.w	r2, r2, #16
 80022aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 ff2c 	bl	800310a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0210 	orr.w	r2, r2, #16
 80022c0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 feba 	bl	8006040 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d6:	d13a      	bne.n	800234e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 ff0a 	bl	80060f6 <USB_HC_ReadInterrupt>
 80022e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e025      	b.n	8002336 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d018      	beq.n	8002330 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002314:	d106      	bne.n	8002324 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f836 	bl	800238e <HCD_HC_IN_IRQHandler>
 8002322:	e005      	b.n	8002330 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fb84 	bl	8002a38 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3d4      	bcc.n	80022ea <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	e000      	b.n	800234e <HAL_HCD_IRQHandler+0x210>
      return;
 800234c:	bf00      	nop
    }
  }
}
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_HCD_Stop+0x16>
 8002366:	2302      	movs	r3, #2
 8002368:	e00d      	b.n	8002386 <HAL_HCD_Stop+0x32>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 ffca 	bl	8006310 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d11a      	bne.n	80023f4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	2304      	movs	r3, #4
 80023ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3361      	adds	r3, #97	; 0x61
 80023de:	2206      	movs	r2, #6
 80023e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fe93 	bl	8006118 <USB_HC_Halt>
 80023f2:	e0af      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240a:	d11b      	bne.n	8002444 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	461a      	mov	r2, r3
 800241a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3361      	adds	r3, #97	; 0x61
 800242e:	2207      	movs	r2, #7
 8002430:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fe6b 	bl	8006118 <USB_HC_Halt>
 8002442:	e087      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b20      	cmp	r3, #32
 8002458:	d109      	bne.n	800246e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	2320      	movs	r3, #32
 800246a:	6093      	str	r3, [r2, #8]
 800246c:	e072      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b08      	cmp	r3, #8
 8002482:	d11a      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	461a      	mov	r2, r3
 8002492:	2308      	movs	r3, #8
 8002494:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	2205      	movs	r2, #5
 80024a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fe30 	bl	8006118 <USB_HC_Halt>
 80024b8:	e04c      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d0:	d11b      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	461a      	mov	r2, r3
 80024e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3361      	adds	r3, #97	; 0x61
 80024f4:	2208      	movs	r2, #8
 80024f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fe08 	bl	8006118 <USB_HC_Halt>
 8002508:	e024      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d119      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	461a      	mov	r2, r3
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3361      	adds	r3, #97	; 0x61
 8002540:	2206      	movs	r2, #6
 8002542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fde2 	bl	8006118 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256a:	d112      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fdce 	bl	8006118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800258e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002590:	e24e      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	f040 80df 	bne.w	8002768 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3348      	adds	r3, #72	; 0x48
 80025c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	0159      	lsls	r1, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	440b      	add	r3, r1
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	440b      	add	r3, r1
 80025e2:	3350      	adds	r3, #80	; 0x50
 80025e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	335c      	adds	r3, #92	; 0x5c
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	461a      	mov	r2, r3
 8002618:	2301      	movs	r3, #1
 800261a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	333f      	adds	r3, #63	; 0x3f
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	333f      	adds	r3, #63	; 0x3f
 800263e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002640:	2b02      	cmp	r3, #2
 8002642:	d111      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fd62 	bl	8006118 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2310      	movs	r3, #16
 8002664:	6093      	str	r3, [r2, #8]
 8002666:	e03a      	b.n	80026de <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	333f      	adds	r3, #63	; 0x3f
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d009      	beq.n	8002690 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	333f      	adds	r3, #63	; 0x3f
 800268a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800268c:	2b01      	cmp	r3, #1
 800268e:	d126      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	0151      	lsls	r1, r2, #5
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	440a      	add	r2, r1
 80026a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3360      	adds	r3, #96	; 0x60
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	b2d9      	uxtb	r1, r3
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	202c      	movs	r0, #44	; 0x2c
 80026cc:	fb00 f303 	mul.w	r3, r0, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3360      	adds	r3, #96	; 0x60
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f005 f819 	bl	8007710 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12b      	bne.n	800273e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3348      	adds	r3, #72	; 0x48
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	202c      	movs	r0, #44	; 0x2c
 80026fc:	fb00 f202 	mul.w	r2, r0, r2
 8002700:	440a      	add	r2, r1
 8002702:	3240      	adds	r2, #64	; 0x40
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	fbb3 f3f2 	udiv	r3, r3, r2
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 818e 	beq.w	8002a30 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3354      	adds	r3, #84	; 0x54
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3354      	adds	r3, #84	; 0x54
 8002738:	4602      	mov	r2, r0
 800273a:	701a      	strb	r2, [r3, #0]
}
 800273c:	e178      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3354      	adds	r3, #84	; 0x54
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	f083 0301 	eor.w	r3, r3, #1
 8002752:	b2d8      	uxtb	r0, r3
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	3354      	adds	r3, #84	; 0x54
 8002762:	4602      	mov	r2, r0
 8002764:	701a      	strb	r2, [r3, #0]
}
 8002766:	e163      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	f040 80f6 	bne.w	800296c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3361      	adds	r3, #97	; 0x61
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d109      	bne.n	80027a8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3360      	adds	r3, #96	; 0x60
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e0c9      	b.n	800293c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3361      	adds	r3, #97	; 0x61
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d109      	bne.n	80027d0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	2205      	movs	r2, #5
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e0b5      	b.n	800293c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3361      	adds	r3, #97	; 0x61
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d009      	beq.n	80027f8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d150      	bne.n	800289a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	202c      	movs	r0, #44	; 0x2c
 8002810:	fb00 f303 	mul.w	r3, r0, r3
 8002814:	440b      	add	r3, r1
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	335c      	adds	r3, #92	; 0x5c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d912      	bls.n	8002854 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3360      	adds	r3, #96	; 0x60
 800284e:	2204      	movs	r2, #4
 8002850:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002852:	e073      	b.n	800293c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3360      	adds	r3, #96	; 0x60
 8002862:	2202      	movs	r2, #2
 8002864:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800287c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002884:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002898:	e050      	b.n	800293c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d122      	bne.n	80028f4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3360      	adds	r3, #96	; 0x60
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e023      	b.n	800293c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3361      	adds	r3, #97	; 0x61
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b07      	cmp	r3, #7
 8002906:	d119      	bne.n	800293c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	335c      	adds	r3, #92	; 0x5c
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	202c      	movs	r0, #44	; 0x2c
 8002920:	fb00 f303 	mul.w	r3, r0, r3
 8002924:	440b      	add	r3, r1
 8002926:	335c      	adds	r3, #92	; 0x5c
 8002928:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3360      	adds	r3, #96	; 0x60
 8002938:	2204      	movs	r2, #4
 800293a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2302      	movs	r3, #2
 800294c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	b2d9      	uxtb	r1, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	202c      	movs	r0, #44	; 0x2c
 8002958:	fb00 f303 	mul.w	r3, r0, r3
 800295c:	4413      	add	r3, r2
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f004 fed3 	bl	8007710 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800296a:	e061      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b10      	cmp	r3, #16
 8002980:	d156      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	333f      	adds	r3, #63	; 0x3f
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d111      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	335c      	adds	r3, #92	; 0x5c
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fbb0 	bl	8006118 <USB_HC_Halt>
 80029b8:	e031      	b.n	8002a1e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	333f      	adds	r3, #63	; 0x3f
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	333f      	adds	r3, #63	; 0x3f
 80029dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d11d      	bne.n	8002a1e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	335c      	adds	r3, #92	; 0x5c
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d110      	bne.n	8002a1e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fb7d 	bl	8006118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	6093      	str	r3, [r2, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11a      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2304      	movs	r3, #4
 8002a78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3361      	adds	r3, #97	; 0x61
 8002a88:	2206      	movs	r2, #6
 8002a8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fb3e 	bl	8006118 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002a9c:	e331      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d12e      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	333d      	adds	r3, #61	; 0x3d
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f040 8313 	bne.w	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	333d      	adds	r3, #61	; 0x3d
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3360      	adds	r3, #96	; 0x60
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fb04 	bl	8006118 <USB_HC_Halt>
}
 8002b10:	e2f7      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b28:	d112      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fae5 	bl	8006118 <USB_HC_Halt>
}
 8002b4e:	e2d8      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d140      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	335c      	adds	r3, #92	; 0x5c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d111      	bne.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	333d      	adds	r3, #61	; 0x3d
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3361      	adds	r3, #97	; 0x61
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fa99 	bl	8006118 <USB_HC_Halt>
}
 8002be6:	e28c      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d12c      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3361      	adds	r3, #97	; 0x61
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	333d      	adds	r3, #61	; 0x3d
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fa6a 	bl	8006118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2340      	movs	r3, #64	; 0x40
 8002c54:	6093      	str	r3, [r2, #8]
}
 8002c56:	e254      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11a      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	2205      	movs	r2, #5
 8002c90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fa3b 	bl	8006118 <USB_HC_Halt>
}
 8002ca2:	e22e      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d140      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	335c      	adds	r3, #92	; 0x5c
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3361      	adds	r3, #97	; 0x61
 8002cda:	2203      	movs	r2, #3
 8002cdc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	333d      	adds	r3, #61	; 0x3d
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d112      	bne.n	8002d18 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	333c      	adds	r3, #60	; 0x3c
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	333d      	adds	r3, #61	; 0x3d
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 f9f8 	bl	8006118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	2310      	movs	r3, #16
 8002d38:	6093      	str	r3, [r2, #8]
}
 8002d3a:	e1e2      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d164      	bne.n	8002e1c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d111      	bne.n	8002d7e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3361      	adds	r3, #97	; 0x61
 8002d68:	2206      	movs	r2, #6
 8002d6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f9ce 	bl	8006118 <USB_HC_Halt>
 8002d7c:	e044      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d920      	bls.n	8002df6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	b2d9      	uxtb	r1, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	202c      	movs	r0, #44	; 0x2c
 8002de2:	fb00 f303 	mul.w	r3, r0, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3360      	adds	r3, #96	; 0x60
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f004 fc8e 	bl	8007710 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002df4:	e008      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3360      	adds	r3, #96	; 0x60
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	6093      	str	r3, [r2, #8]
}
 8002e1a:	e172      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d11b      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3361      	adds	r3, #97	; 0x61
 8002e42:	2208      	movs	r2, #8
 8002e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f961 	bl	8006118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e68:	6093      	str	r3, [r2, #8]
}
 8002e6a:	e14a      	b.n	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	f040 813f 	bne.w	8003102 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3361      	adds	r3, #97	; 0x61
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d17d      	bne.n	8002f94 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3360      	adds	r3, #96	; 0x60
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	333f      	adds	r3, #63	; 0x3f
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d00a      	beq.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	333f      	adds	r3, #63	; 0x3f
 8002ecc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	f040 8100 	bne.w	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d113      	bne.n	8002f04 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3355      	adds	r3, #85	; 0x55
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3355      	adds	r3, #85	; 0x55
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f040 80e3 	bne.w	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	334c      	adds	r3, #76	; 0x4c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80d8 	beq.w	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	334c      	adds	r3, #76	; 0x4c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	202c      	movs	r0, #44	; 0x2c
 8002f3a:	fb00 f202 	mul.w	r2, r0, r2
 8002f3e:	440a      	add	r2, r1
 8002f40:	3240      	adds	r2, #64	; 0x40
 8002f42:	8812      	ldrh	r2, [r2, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	3b01      	subs	r3, #1
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	202c      	movs	r0, #44	; 0x2c
 8002f4e:	fb00 f202 	mul.w	r2, r0, r2
 8002f52:	440a      	add	r2, r1
 8002f54:	3240      	adds	r2, #64	; 0x40
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80b5 	beq.w	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	3355      	adds	r3, #85	; 0x55
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	f083 0301 	eor.w	r3, r3, #1
 8002f7e:	b2d8      	uxtb	r0, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3355      	adds	r3, #85	; 0x55
 8002f8e:	4602      	mov	r2, r0
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e09f      	b.n	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3361      	adds	r3, #97	; 0x61
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d109      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3360      	adds	r3, #96	; 0x60
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e08b      	b.n	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3361      	adds	r3, #97	; 0x61
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d109      	bne.n	8002fe4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3360      	adds	r3, #96	; 0x60
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e077      	b.n	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3361      	adds	r3, #97	; 0x61
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d109      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3360      	adds	r3, #96	; 0x60
 8003006:	2205      	movs	r2, #5
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e063      	b.n	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3361      	adds	r3, #97	; 0x61
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d009      	beq.n	8003034 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3361      	adds	r3, #97	; 0x61
 800302e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003030:	2b08      	cmp	r3, #8
 8003032:	d14f      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	335c      	adds	r3, #92	; 0x5c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	202c      	movs	r0, #44	; 0x2c
 800304c:	fb00 f303 	mul.w	r3, r0, r3
 8003050:	440b      	add	r3, r1
 8003052:	335c      	adds	r3, #92	; 0x5c
 8003054:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	335c      	adds	r3, #92	; 0x5c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d912      	bls.n	8003090 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	2204      	movs	r2, #4
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e021      	b.n	80030d4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3360      	adds	r3, #96	; 0x60
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	461a      	mov	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2302      	movs	r3, #2
 80030e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	b2d9      	uxtb	r1, r3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	202c      	movs	r0, #44	; 0x2c
 80030f0:	fb00 f303 	mul.w	r3, r0, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f004 fb07 	bl	8007710 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003102:	bf00      	nop
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b08a      	sub	sp, #40	; 0x28
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	0c5b      	lsrs	r3, r3, #17
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d004      	beq.n	8003150 <HCD_RXQLVL_IRQHandler+0x46>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b05      	cmp	r3, #5
 800314a:	f000 80a9 	beq.w	80032a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800314e:	e0aa      	b.n	80032a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80a6 	beq.w	80032a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3344      	adds	r3, #68	; 0x44
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 809b 	beq.w	80032a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3350      	adds	r3, #80	; 0x50
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	441a      	add	r2, r3
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	202c      	movs	r0, #44	; 0x2c
 8003188:	fb00 f303 	mul.w	r3, r0, r3
 800318c:	440b      	add	r3, r1
 800318e:	334c      	adds	r3, #76	; 0x4c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d87a      	bhi.n	800328c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3344      	adds	r3, #68	; 0x44
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	b292      	uxth	r2, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f002 feee 	bl	8005f90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3344      	adds	r3, #68	; 0x44
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	441a      	add	r2, r3
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	202c      	movs	r0, #44	; 0x2c
 80031ce:	fb00 f303 	mul.w	r3, r0, r3
 80031d2:	440b      	add	r3, r1
 80031d4:	3344      	adds	r3, #68	; 0x44
 80031d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3350      	adds	r3, #80	; 0x50
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	441a      	add	r2, r3
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	202c      	movs	r0, #44	; 0x2c
 80031f2:	fb00 f303 	mul.w	r3, r0, r3
 80031f6:	440b      	add	r3, r1
 80031f8:	3350      	adds	r3, #80	; 0x50
 80031fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	0cdb      	lsrs	r3, r3, #19
 800320c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003210:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3340      	adds	r3, #64	; 0x40
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4293      	cmp	r3, r2
 8003228:	d13c      	bne.n	80032a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d039      	beq.n	80032a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003246:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800324e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3354      	adds	r3, #84	; 0x54
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f083 0301 	eor.w	r3, r3, #1
 8003276:	b2d8      	uxtb	r0, r3
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3354      	adds	r3, #84	; 0x54
 8003286:	4602      	mov	r2, r0
 8003288:	701a      	strb	r2, [r3, #0]
      break;
 800328a:	e00b      	b.n	80032a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	3360      	adds	r3, #96	; 0x60
 800329a:	2204      	movs	r2, #4
 800329c:	701a      	strb	r2, [r3, #0]
      break;
 800329e:	e001      	b.n	80032a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80032a4:	bf00      	nop
  }
}
 80032a6:	bf00      	nop
 80032a8:	3728      	adds	r7, #40	; 0x28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d10b      	bne.n	80032fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f004 f9f1 	bl	80076d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d132      	bne.n	800336e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b04      	cmp	r3, #4
 8003318:	d126      	bne.n	8003368 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d113      	bne.n	800334a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800332c:	d106      	bne.n	800333c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2102      	movs	r1, #2
 8003334:	4618      	mov	r0, r3
 8003336:	f002 fea4 	bl	8006082 <USB_InitFSLSPClkSel>
 800333a:	e011      	b.n	8003360 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f002 fe9d 	bl	8006082 <USB_InitFSLSPClkSel>
 8003348:	e00a      	b.n	8003360 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d106      	bne.n	8003360 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003358:	461a      	mov	r2, r3
 800335a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800335e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f004 f9e7 	bl	8007734 <HAL_HCD_PortEnabled_Callback>
 8003366:	e002      	b.n	800336e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f004 f9f1 	bl	8007750 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b20      	cmp	r3, #32
 8003376:	d103      	bne.n	8003380 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f043 0320 	orr.w	r3, r3, #32
 800337e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003386:	461a      	mov	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e12b      	b.n	80035fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fd5e 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033f8:	f001 f964 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a81      	ldr	r2, [pc, #516]	; (8003608 <HAL_I2C_Init+0x274>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d807      	bhi.n	8003418 <HAL_I2C_Init+0x84>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_I2C_Init+0x278>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e006      	b.n	8003426 <HAL_I2C_Init+0x92>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a7d      	ldr	r2, [pc, #500]	; (8003610 <HAL_I2C_Init+0x27c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	bf94      	ite	ls
 8003420:	2301      	movls	r3, #1
 8003422:	2300      	movhi	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0e7      	b.n	80035fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a78      	ldr	r2, [pc, #480]	; (8003614 <HAL_I2C_Init+0x280>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a6a      	ldr	r2, [pc, #424]	; (8003608 <HAL_I2C_Init+0x274>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d802      	bhi.n	8003468 <HAL_I2C_Init+0xd4>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	e009      	b.n	800347c <HAL_I2C_Init+0xe8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4a69      	ldr	r2, [pc, #420]	; (8003618 <HAL_I2C_Init+0x284>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800348e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	495c      	ldr	r1, [pc, #368]	; (8003608 <HAL_I2C_Init+0x274>)
 8003498:	428b      	cmp	r3, r1
 800349a:	d819      	bhi.n	80034d0 <HAL_I2C_Init+0x13c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034b0:	400b      	ands	r3, r1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_I2C_Init+0x138>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e59      	subs	r1, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	e051      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e04f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d111      	bne.n	80034fc <HAL_I2C_Init+0x168>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e012      	b.n	8003522 <HAL_I2C_Init+0x18e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	0099      	lsls	r1, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x196>
 8003526:	2301      	movs	r3, #1
 8003528:	e022      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10e      	bne.n	8003550 <HAL_I2C_Init+0x1bc>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e58      	subs	r0, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	440b      	add	r3, r1
 8003540:	fbb0 f3f3 	udiv	r3, r0, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6809      	ldr	r1, [r1, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800359e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6911      	ldr	r1, [r2, #16]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	000186a0 	.word	0x000186a0
 800360c:	001e847f 	.word	0x001e847f
 8003610:	003d08ff 	.word	0x003d08ff
 8003614:	431bde83 	.word	0x431bde83
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d129      	bne.n	8003686 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2224      	movs	r2, #36	; 0x24
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0210 	bic.w	r2, r2, #16
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d12a      	bne.n	8003704 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2224      	movs	r2, #36	; 0x24
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80036ce:	89fb      	ldrh	r3, [r7, #14]
 80036d0:	f023 030f 	bic.w	r3, r3, #15
 80036d4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	4313      	orrs	r3, r2
 80036de:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	89fa      	ldrh	r2, [r7, #14]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0bf      	b.n	80038a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fc08 	bl	8000f50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003756:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800376c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_LTDC_Init+0x19c>)
 8003788:	400b      	ands	r3, r1
 800378a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <HAL_LTDC_Init+0x19c>)
 80037b6:	400b      	ands	r3, r1
 80037b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68d9      	ldr	r1, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b33      	ldr	r3, [pc, #204]	; (80038b0 <HAL_LTDC_Init+0x19c>)
 80037e4:	400b      	ands	r3, r1
 80037e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6919      	ldr	r1, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6959      	ldr	r1, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_LTDC_Init+0x19c>)
 8003812:	400b      	ands	r3, r1
 8003814:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0206 	orr.w	r2, r2, #6
 8003882:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	f000f800 	.word	0xf000f800

080038b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d023      	beq.n	800391e <HAL_LTDC_IRQHandler+0x6a>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01e      	beq.n	800391e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2204      	movs	r2, #4
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2204      	movs	r2, #4
 800390c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f86f 	bl	80039fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d023      	beq.n	8003970 <HAL_LTDC_IRQHandler+0xbc>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01e      	beq.n	8003970 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0202 	bic.w	r2, r2, #2
 8003940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2202      	movs	r2, #2
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003950:	f043 0202 	orr.w	r2, r3, #2
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2204      	movs	r2, #4
 800395e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f846 	bl	80039fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01b      	beq.n	80039b2 <HAL_LTDC_IRQHandler+0xfe>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d016      	beq.n	80039b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f82f 	bl	8003a10 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_LTDC_IRQHandler+0x140>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0208 	bic.w	r2, r2, #8
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2208      	movs	r2, #8
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f818 	bl	8003a24 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_LTDC_ConfigLayer+0x1a>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e02c      	b.n	8003aac <HAL_LTDC_ConfigLayer+0x74>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2134      	movs	r1, #52	; 0x34
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f811 	bl	8003ab4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2201      	movs	r2, #1
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}

08003ab4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	4413      	add	r3, r2
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	01db      	lsls	r3, r3, #7
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3384      	adds	r3, #132	; 0x84
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4611      	mov	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	01d2      	lsls	r2, r2, #7
 8003af0:	440a      	add	r2, r1
 8003af2:	3284      	adds	r2, #132	; 0x84
 8003af4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003af8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b0a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b0c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	01db      	lsls	r3, r3, #7
 8003b18:	440b      	add	r3, r1
 8003b1a:	3384      	adds	r3, #132	; 0x84
 8003b1c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b22:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b32:	4413      	add	r3, r2
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	01db      	lsls	r3, r3, #7
 8003b42:	4413      	add	r3, r2
 8003b44:	3384      	adds	r3, #132	; 0x84
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	01d2      	lsls	r2, r2, #7
 8003b52:	440a      	add	r2, r1
 8003b54:	3284      	adds	r2, #132	; 0x84
 8003b56:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b5a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b6a:	4413      	add	r3, r2
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4619      	mov	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	01db      	lsls	r3, r3, #7
 8003b78:	440b      	add	r3, r1
 8003b7a:	3384      	adds	r3, #132	; 0x84
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	01db      	lsls	r3, r3, #7
 8003b8e:	4413      	add	r3, r2
 8003b90:	3384      	adds	r3, #132	; 0x84
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	01d2      	lsls	r2, r2, #7
 8003b9e:	440a      	add	r2, r1
 8003ba0:	3284      	adds	r2, #132	; 0x84
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	01db      	lsls	r3, r3, #7
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3384      	adds	r3, #132	; 0x84
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	01db      	lsls	r3, r3, #7
 8003be4:	4413      	add	r3, r2
 8003be6:	3384      	adds	r3, #132	; 0x84
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	01db      	lsls	r3, r3, #7
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3384      	adds	r3, #132	; 0x84
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c04:	461a      	mov	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	01db      	lsls	r3, r3, #7
 8003c18:	440b      	add	r3, r1
 8003c1a:	3384      	adds	r3, #132	; 0x84
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4413      	add	r3, r2
 8003c30:	3384      	adds	r3, #132	; 0x84
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	4611      	mov	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	01d2      	lsls	r2, r2, #7
 8003c3e:	440a      	add	r2, r1
 8003c40:	3284      	adds	r2, #132	; 0x84
 8003c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	01db      	lsls	r3, r3, #7
 8003c52:	4413      	add	r3, r2
 8003c54:	3384      	adds	r3, #132	; 0x84
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	01db      	lsls	r3, r3, #7
 8003c68:	4413      	add	r3, r2
 8003c6a:	3384      	adds	r3, #132	; 0x84
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	4611      	mov	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	01d2      	lsls	r2, r2, #7
 8003c78:	440a      	add	r2, r1
 8003c7a:	3284      	adds	r2, #132	; 0x84
 8003c7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c80:	f023 0307 	bic.w	r3, r3, #7
 8003c84:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	6809      	ldr	r1, [r1, #0]
 8003c92:	4608      	mov	r0, r1
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	01c9      	lsls	r1, r1, #7
 8003c98:	4401      	add	r1, r0
 8003c9a:	3184      	adds	r1, #132	; 0x84
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	01db      	lsls	r3, r3, #7
 8003caa:	4413      	add	r3, r2
 8003cac:	3384      	adds	r3, #132	; 0x84
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	01db      	lsls	r3, r3, #7
 8003cba:	4413      	add	r3, r2
 8003cbc:	3384      	adds	r3, #132	; 0x84
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	01db      	lsls	r3, r3, #7
 8003cce:	4413      	add	r3, r2
 8003cd0:	3384      	adds	r3, #132	; 0x84
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e01b      	b.n	8003d20 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e014      	b.n	8003d20 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00b      	beq.n	8003d16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d007      	beq.n	8003d16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d003      	beq.n	8003d16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d12:	2b07      	cmp	r3, #7
 8003d14:	d102      	bne.n	8003d1c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d16:	2302      	movs	r3, #2
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e001      	b.n	8003d20 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	01db      	lsls	r3, r3, #7
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3384      	adds	r3, #132	; 0x84
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	4611      	mov	r1, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	01d2      	lsls	r2, r2, #7
 8003d3a:	440a      	add	r2, r1
 8003d3c:	3284      	adds	r2, #132	; 0x84
 8003d3e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003d42:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1acb      	subs	r3, r1, r3
 8003d5a:	69f9      	ldr	r1, [r7, #28]
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	6809      	ldr	r1, [r1, #0]
 8003d66:	4608      	mov	r0, r1
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	01c9      	lsls	r1, r1, #7
 8003d6c:	4401      	add	r1, r0
 8003d6e:	3184      	adds	r1, #132	; 0x84
 8003d70:	4313      	orrs	r3, r2
 8003d72:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	01db      	lsls	r3, r3, #7
 8003d7e:	4413      	add	r3, r2
 8003d80:	3384      	adds	r3, #132	; 0x84
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	01d2      	lsls	r2, r2, #7
 8003d8e:	440a      	add	r2, r1
 8003d90:	3284      	adds	r2, #132	; 0x84
 8003d92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d96:	f023 0307 	bic.w	r3, r3, #7
 8003d9a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	01db      	lsls	r3, r3, #7
 8003da6:	4413      	add	r3, r2
 8003da8:	3384      	adds	r3, #132	; 0x84
 8003daa:	461a      	mov	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3384      	adds	r3, #132	; 0x84
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	01d2      	lsls	r2, r2, #7
 8003dcc:	440a      	add	r2, r1
 8003dce:	3284      	adds	r2, #132	; 0x84
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3724      	adds	r7, #36	; 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e267      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d075      	beq.n	8003eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d00c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0e:	4b85      	ldr	r3, [pc, #532]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d112      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1a:	4b82      	ldr	r3, [pc, #520]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	4b7e      	ldr	r3, [pc, #504]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05b      	beq.n	8003eec <HAL_RCC_OscConfig+0x108>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d157      	bne.n	8003eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e242      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d106      	bne.n	8003e58 <HAL_RCC_OscConfig+0x74>
 8003e4a:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a75      	ldr	r2, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e01d      	b.n	8003e94 <HAL_RCC_OscConfig+0xb0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x98>
 8003e62:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6f      	ldr	r2, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6c      	ldr	r2, [pc, #432]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0xb0>
 8003e7c:	4b69      	ldr	r3, [pc, #420]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a68      	ldr	r2, [pc, #416]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a65      	ldr	r2, [pc, #404]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fc3e 	bl	800171c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fd fc3a 	bl	800171c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e207      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xc0>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fc2a 	bl	800171c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd fc26 	bl	800171c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1f3      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ede:	4b51      	ldr	r3, [pc, #324]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0xe8>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d063      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b44      	ldr	r3, [pc, #272]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x152>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1c7      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x244>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fbdf 	bl	800171c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fd fbdb 	bl	800171c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1a8      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4925      	ldr	r1, [pc, #148]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x244>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fbbe 	bl	800171c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fbba 	bl	800171c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e187      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d036      	beq.n	800403c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x248>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd fb9e 	bl	800171c <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fd fb9a 	bl	800171c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e167      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x200>
 8004002:	e01b      	b.n	800403c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x248>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400a:	f7fd fb87 	bl	800171c <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	e00e      	b.n	8004030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fd fb83 	bl	800171c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d907      	bls.n	8004030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e150      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
 8004024:	40023800 	.word	0x40023800
 8004028:	42470000 	.word	0x42470000
 800402c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ea      	bne.n	8004012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8097 	beq.w	8004178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404e:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	4b7d      	ldr	r3, [pc, #500]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a7c      	ldr	r2, [pc, #496]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b7a      	ldr	r3, [pc, #488]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b77      	ldr	r3, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b74      	ldr	r3, [pc, #464]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a73      	ldr	r2, [pc, #460]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fd fb43 	bl	800171c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fd fb3f 	bl	800171c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e10c      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x2ea>
 80040c0:	4b64      	ldr	r3, [pc, #400]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x324>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x30c>
 80040d6:	4b5f      	ldr	r3, [pc, #380]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a5e      	ldr	r2, [pc, #376]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	4b5c      	ldr	r3, [pc, #368]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a5b      	ldr	r2, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0x324>
 80040f0:	4b58      	ldr	r3, [pc, #352]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a57      	ldr	r2, [pc, #348]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b55      	ldr	r3, [pc, #340]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a54      	ldr	r2, [pc, #336]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd fb04 	bl	800171c <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fd fb00 	bl	800171c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0cb      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	4b49      	ldr	r3, [pc, #292]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ee      	beq.n	8004118 <HAL_RCC_OscConfig+0x334>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fd faee 	bl	800171c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fd faea 	bl	800171c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0b5      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ee      	bne.n	8004144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416c:	4b39      	ldr	r3, [pc, #228]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a38      	ldr	r2, [pc, #224]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a1 	beq.w	80042c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b08      	cmp	r3, #8
 800418c:	d05c      	beq.n	8004248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d141      	bne.n	800421a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_OscConfig+0x478>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fd fabe 	bl	800171c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd faba 	bl	800171c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e087      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	491b      	ldr	r1, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x478>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fd fa93 	bl	800171c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fd fa8f 	bl	800171c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e05c      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x416>
 8004218:	e054      	b.n	80042c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_OscConfig+0x478>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fd fa7c 	bl	800171c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004228:	f7fd fa78 	bl	800171c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e045      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x444>
 8004246:	e03d      	b.n	80042c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e038      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000
 800425c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x4ec>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d028      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d121      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d11a      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d111      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800

080042d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0cc      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b68      	ldr	r3, [pc, #416]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d90c      	bls.n	8004310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b65      	ldr	r3, [pc, #404]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a58      	ldr	r2, [pc, #352]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	494d      	ldr	r1, [pc, #308]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d044      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d119      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d003      	beq.n	8004392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438e:	2b03      	cmp	r3, #3
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e067      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 0203 	bic.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4934      	ldr	r1, [pc, #208]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c4:	f7fd f9aa 	bl	800171c <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fd f9a6 	bl	800171c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e04f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 020c 	and.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d1eb      	bne.n	80043cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f4:	4b25      	ldr	r3, [pc, #148]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d20c      	bcs.n	800441c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b22      	ldr	r3, [pc, #136]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e032      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4916      	ldr	r1, [pc, #88]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	490e      	ldr	r1, [pc, #56]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445a:	f000 f821 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	490a      	ldr	r1, [pc, #40]	; (8004494 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd f802 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023c00 	.word	0x40023c00
 8004490:	40023800 	.word	0x40023800
 8004494:	08007894 	.word	0x08007894
 8004498:	20000000 	.word	0x20000000
 800449c:	20000004 	.word	0x20000004

080044a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b094      	sub	sp, #80	; 0x50
 80044a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
 80044ac:	2300      	movs	r3, #0
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	2300      	movs	r3, #0
 80044b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b8:	4b79      	ldr	r3, [pc, #484]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d00d      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x40>
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	f200 80e1 	bhi.w	800468c <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x34>
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x3a>
 80044d2:	e0db      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d4:	4b73      	ldr	r3, [pc, #460]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044d8:	e0db      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044da:	4b73      	ldr	r3, [pc, #460]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80044dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044de:	e0d8      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ea:	4b6d      	ldr	r3, [pc, #436]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f6:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	099b      	lsrs	r3, r3, #6
 80044fc:	2200      	movs	r2, #0
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004500:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004508:	633b      	str	r3, [r7, #48]	; 0x30
 800450a:	2300      	movs	r3, #0
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
 800450e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004512:	4622      	mov	r2, r4
 8004514:	462b      	mov	r3, r5
 8004516:	f04f 0000 	mov.w	r0, #0
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	0159      	lsls	r1, r3, #5
 8004520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004524:	0150      	lsls	r0, r2, #5
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4621      	mov	r1, r4
 800452c:	1a51      	subs	r1, r2, r1
 800452e:	6139      	str	r1, [r7, #16]
 8004530:	4629      	mov	r1, r5
 8004532:	eb63 0301 	sbc.w	r3, r3, r1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004544:	4659      	mov	r1, fp
 8004546:	018b      	lsls	r3, r1, #6
 8004548:	4651      	mov	r1, sl
 800454a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800454e:	4651      	mov	r1, sl
 8004550:	018a      	lsls	r2, r1, #6
 8004552:	4651      	mov	r1, sl
 8004554:	ebb2 0801 	subs.w	r8, r2, r1
 8004558:	4659      	mov	r1, fp
 800455a:	eb63 0901 	sbc.w	r9, r3, r1
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800456a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800456e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004572:	4690      	mov	r8, r2
 8004574:	4699      	mov	r9, r3
 8004576:	4623      	mov	r3, r4
 8004578:	eb18 0303 	adds.w	r3, r8, r3
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	462b      	mov	r3, r5
 8004580:	eb49 0303 	adc.w	r3, r9, r3
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004592:	4629      	mov	r1, r5
 8004594:	024b      	lsls	r3, r1, #9
 8004596:	4621      	mov	r1, r4
 8004598:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800459c:	4621      	mov	r1, r4
 800459e:	024a      	lsls	r2, r1, #9
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a6:	2200      	movs	r2, #0
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045b0:	f7fb fe26 	bl	8000200 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4613      	mov	r3, r2
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045bc:	e058      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045be:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	2200      	movs	r2, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	4611      	mov	r1, r2
 80045ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
 80045d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	f04f 0000 	mov.w	r0, #0
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	0159      	lsls	r1, r3, #5
 80045e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ea:	0150      	lsls	r0, r2, #5
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4641      	mov	r1, r8
 80045f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80045f6:	4649      	mov	r1, r9
 80045f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800460c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004610:	ebb2 040a 	subs.w	r4, r2, sl
 8004614:	eb63 050b 	sbc.w	r5, r3, fp
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	00eb      	lsls	r3, r5, #3
 8004622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004626:	00e2      	lsls	r2, r4, #3
 8004628:	4614      	mov	r4, r2
 800462a:	461d      	mov	r5, r3
 800462c:	4643      	mov	r3, r8
 800462e:	18e3      	adds	r3, r4, r3
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	464b      	mov	r3, r9
 8004634:	eb45 0303 	adc.w	r3, r5, r3
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004646:	4629      	mov	r1, r5
 8004648:	028b      	lsls	r3, r1, #10
 800464a:	4621      	mov	r1, r4
 800464c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004650:	4621      	mov	r1, r4
 8004652:	028a      	lsls	r2, r1, #10
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465a:	2200      	movs	r2, #0
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	61fa      	str	r2, [r7, #28]
 8004660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004664:	f7fb fdcc 	bl	8000200 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	3301      	adds	r3, #1
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800468a:	e002      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004694:	4618      	mov	r0, r3
 8004696:	3750      	adds	r7, #80	; 0x50
 8004698:	46bd      	mov	sp, r7
 800469a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000000 	.word	0x20000000

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046c8:	f7ff fff0 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0a9b      	lsrs	r3, r3, #10
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4903      	ldr	r1, [pc, #12]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40023800 	.word	0x40023800
 80046e8:	080078a4 	.word	0x080078a4

080046ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f0:	f7ff ffdc 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0b5b      	lsrs	r3, r3, #13
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	080078a4 	.word	0x080078a4

08004714 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	220f      	movs	r2, #15
 8004722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_RCC_GetClockConfig+0x60>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 020f 	and.w	r2, r3, #15
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	40023c00 	.word	0x40023c00

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d075      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047ac:	4b91      	ldr	r3, [pc, #580]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047b2:	f7fc ffb3 	bl	800171c <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047ba:	f7fc ffaf 	bl	800171c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e189      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047cc:	4b8a      	ldr	r3, [pc, #552]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	019a      	lsls	r2, r3, #6
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	071b      	lsls	r3, r3, #28
 80047f0:	4981      	ldr	r1, [pc, #516]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004804:	4b7c      	ldr	r3, [pc, #496]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	0f1b      	lsrs	r3, r3, #28
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	019a      	lsls	r2, r3, #6
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4974      	ldr	r1, [pc, #464]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800482c:	4b72      	ldr	r3, [pc, #456]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800482e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004832:	f023 021f 	bic.w	r2, r3, #31
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	3b01      	subs	r3, #1
 800483c:	496e      	ldr	r1, [pc, #440]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00d      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	019a      	lsls	r2, r3, #6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	061b      	lsls	r3, r3, #24
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	071b      	lsls	r3, r3, #28
 8004864:	4964      	ldr	r1, [pc, #400]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800486c:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004872:	f7fc ff53 	bl	800171c <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800487a:	f7fc ff4f 	bl	800171c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e129      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800488c:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d079      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048b0:	4b52      	ldr	r3, [pc, #328]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b6:	f7fc ff31 	bl	800171c <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048be:	f7fc ff2d 	bl	800171c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e107      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048d0:	4b49      	ldr	r3, [pc, #292]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048dc:	d0ef      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d020      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048ea:	4b43      	ldr	r3, [pc, #268]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	0f1b      	lsrs	r3, r3, #28
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	019a      	lsls	r2, r3, #6
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	431a      	orrs	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	493b      	ldr	r1, [pc, #236]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004912:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	3b01      	subs	r3, #1
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	4934      	ldr	r1, [pc, #208]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01e      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	0e1b      	lsrs	r3, r3, #24
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	019a      	lsls	r2, r3, #6
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	071b      	lsls	r3, r3, #28
 8004958:	4927      	ldr	r1, [pc, #156]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004960:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004966:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	4922      	ldr	r1, [pc, #136]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004976:	4b21      	ldr	r3, [pc, #132]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800497c:	f7fc fece 	bl	800171c <HAL_GetTick>
 8004980:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004984:	f7fc feca 	bl	800171c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0a4      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800499e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a2:	d1ef      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 808b 	beq.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049da:	f7fc fe9f 	bl	800171c <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049e0:	e010      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fc fe9b 	bl	800171c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d909      	bls.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e075      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80049f4:	42470068 	.word	0x42470068
 80049f8:	40023800 	.word	0x40023800
 80049fc:	42470070 	.word	0x42470070
 8004a00:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a04:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0e8      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a38:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a44:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a4a:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d114      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fc fe61 	bl	800171c <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fc fe5d 	bl	800171c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e035      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ee      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8c:	d10d      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	4912      	ldr	r1, [pc, #72]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a0f      	ldr	r2, [pc, #60]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ab0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ab4:	6093      	str	r3, [r2, #8]
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ab8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac2:	490a      	ldr	r1, [pc, #40]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004adc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	40023800 	.word	0x40023800
 8004af0:	42470e40 	.word	0x42470e40
 8004af4:	424711e0 	.word	0x424711e0

08004af8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e025      	b.n	8004b58 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fc fca5 	bl	8001470 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f001 f8dd 	bl	8005cf8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	f001 f932 	bl	8005db2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07b      	b.n	8004c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d108      	bne.n	8004b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d009      	beq.n	8004b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	61da      	str	r2, [r3, #28]
 8004b8a:	e005      	b.n	8004b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fafc 	bl	80011b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0104 	and.w	r1, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f003 0210 	and.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e041      	b.n	8004d08 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc fad1 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 fa95 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d001      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04e      	b.n	8004dc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a23      	ldr	r2, [pc, #140]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d01d      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <HAL_TIM_Base_Start_IT+0xdc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d111      	bne.n	8004db4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d010      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db2:	e007      	b.n	8004dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40010400 	.word	0x40010400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40001800 	.word	0x40001800

08004df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0202 	mvn.w	r2, #2
 8004e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9b5 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9a7 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9b8 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d122      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0204 	mvn.w	r2, #4
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f98b 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f97d 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f98e 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d122      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d11b      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0208 	mvn.w	r2, #8
 8004ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f961 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004ee0:	e005      	b.n	8004eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f953 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f964 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d122      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d11b      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0210 	mvn.w	r2, #16
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f937 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f929 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f93a 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10e      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0201 	mvn.w	r2, #1
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fb fef6 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d10e      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fae0 	bl	8005560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d10e      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8ff 	bl	80051ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0220 	mvn.w	r2, #32
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 faaa 	bl	800554c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIM_ConfigClockSource+0x1c>
 8005018:	2302      	movs	r3, #2
 800501a:	e0b4      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x186>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d03e      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	f200 8087 	bhi.w	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	f000 8086 	beq.w	8005172 <HAL_TIM_ConfigClockSource+0x172>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d87f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b70      	cmp	r3, #112	; 0x70
 800506e:	d01a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d87b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d050      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x11a>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d877      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b50      	cmp	r3, #80	; 0x50
 800507e:	d03c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xfa>
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d873      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d058      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x13a>
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d86f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b30      	cmp	r3, #48	; 0x30
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d86b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d060      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d867      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d05a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	e062      	b.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f000 f9ad 	bl	8005414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]
      break;
 80050d2:	e04f      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f000 f996 	bl	8005414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f6:	609a      	str	r2, [r3, #8]
      break;
 80050f8:	e03c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	461a      	mov	r2, r3
 8005108:	f000 f90a 	bl	8005320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2150      	movs	r1, #80	; 0x50
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f963 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8005118:	e02c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	461a      	mov	r2, r3
 8005128:	f000 f929 	bl	800537e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2160      	movs	r1, #96	; 0x60
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f953 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8005138:	e01c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 f8ea 	bl	8005320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f943 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8005158:	e00c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 f93a 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 800516a:	e003      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a40      	ldr	r2, [pc, #256]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3d      	ldr	r2, [pc, #244]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3c      	ldr	r2, [pc, #240]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3b      	ldr	r2, [pc, #236]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3a      	ldr	r2, [pc, #232]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d027      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d023      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d017      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a28      	ldr	r2, [pc, #160]	; (8005308 <TIM_Base_SetConfig+0x128>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <TIM_Base_SetConfig+0x12c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <TIM_Base_SetConfig+0x130>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <TIM_Base_SetConfig+0x134>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a24      	ldr	r2, [pc, #144]	; (8005318 <TIM_Base_SetConfig+0x138>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a23      	ldr	r2, [pc, #140]	; (800531c <TIM_Base_SetConfig+0x13c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d108      	bne.n	80052a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <TIM_Base_SetConfig+0x124>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d103      	bne.n	80052e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	615a      	str	r2, [r3, #20]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40010400 	.word	0x40010400
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800
 8005314:	40001800 	.word	0x40001800
 8005318:	40001c00 	.word	0x40001c00
 800531c:	40002000 	.word	0x40002000

08005320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 030a 	bic.w	r3, r3, #10
 800535c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537e:	b480      	push	{r7}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0210 	bic.w	r2, r3, #16
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f043 0307 	orr.w	r3, r3, #7
 8005400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800542e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	021a      	lsls	r2, r3, #8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	431a      	orrs	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e05a      	b.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d01d      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1a      	ldr	r2, [pc, #104]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d10c      	bne.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e03f      	b.n	8005606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fb fe8e 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2224      	movs	r2, #36	; 0x24
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f929 	bl	8005810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b08a      	sub	sp, #40	; 0x28
 8005612:	af02      	add	r7, sp, #8
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	d17c      	bne.n	8005728 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Transmit+0x2c>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e075      	b.n	800572a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UART_Transmit+0x3e>
 8005648:	2302      	movs	r3, #2
 800564a:	e06e      	b.n	800572a <HAL_UART_Transmit+0x11c>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2221      	movs	r2, #33	; 0x21
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005662:	f7fc f85b 	bl	800171c <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	88fa      	ldrh	r2, [r7, #6]
 8005672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d108      	bne.n	8005690 <HAL_UART_Transmit+0x82>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e003      	b.n	8005698 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056a0:	e02a      	b.n	80056f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f840 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e036      	b.n	800572a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	3302      	adds	r3, #2
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e007      	b.n	80056ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1cf      	bne.n	80056a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2140      	movs	r1, #64	; 0x40
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f810 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b090      	sub	sp, #64	; 0x40
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	e050      	b.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d04c      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800574c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <UART_WaitOnFlagUntilTimeout+0x30>
 8005752:	f7fb ffe3 	bl	800171c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575e:	429a      	cmp	r2, r3
 8005760:	d241      	bcs.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005782:	637a      	str	r2, [r7, #52]	; 0x34
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e5      	bne.n	8005762 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b6:	623a      	str	r2, [r7, #32]
 80057b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e00f      	b.n	8005806 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	429a      	cmp	r2, r3
 8005802:	d09f      	beq.n	8005744 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3740      	adds	r7, #64	; 0x40
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b0c0      	sub	sp, #256	; 0x100
 8005816:	af00      	add	r7, sp, #0
 8005818:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	68d9      	ldr	r1, [r3, #12]
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	ea40 0301 	orr.w	r3, r0, r1
 8005838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	431a      	orrs	r2, r3
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	431a      	orrs	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005868:	f021 010c 	bic.w	r1, r1, #12
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005876:	430b      	orrs	r3, r1
 8005878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588a:	6999      	ldr	r1, [r3, #24]
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	ea40 0301 	orr.w	r3, r0, r1
 8005896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b8f      	ldr	r3, [pc, #572]	; (8005adc <UART_SetConfig+0x2cc>)
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d005      	beq.n	80058b0 <UART_SetConfig+0xa0>
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b8d      	ldr	r3, [pc, #564]	; (8005ae0 <UART_SetConfig+0x2d0>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d104      	bne.n	80058ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b0:	f7fe ff1c 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 80058b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058b8:	e003      	b.n	80058c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ba:	f7fe ff03 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 80058be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	f040 810c 	bne.w	8005ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058e2:	4622      	mov	r2, r4
 80058e4:	462b      	mov	r3, r5
 80058e6:	1891      	adds	r1, r2, r2
 80058e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80058ea:	415b      	adcs	r3, r3
 80058ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058f2:	4621      	mov	r1, r4
 80058f4:	eb12 0801 	adds.w	r8, r2, r1
 80058f8:	4629      	mov	r1, r5
 80058fa:	eb43 0901 	adc.w	r9, r3, r1
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005912:	4690      	mov	r8, r2
 8005914:	4699      	mov	r9, r3
 8005916:	4623      	mov	r3, r4
 8005918:	eb18 0303 	adds.w	r3, r8, r3
 800591c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005920:	462b      	mov	r3, r5
 8005922:	eb49 0303 	adc.w	r3, r9, r3
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005936:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800593a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800593e:	460b      	mov	r3, r1
 8005940:	18db      	adds	r3, r3, r3
 8005942:	653b      	str	r3, [r7, #80]	; 0x50
 8005944:	4613      	mov	r3, r2
 8005946:	eb42 0303 	adc.w	r3, r2, r3
 800594a:	657b      	str	r3, [r7, #84]	; 0x54
 800594c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005954:	f7fa fc54 	bl	8000200 <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <UART_SetConfig+0x2d4>)
 800595e:	fba3 2302 	umull	r2, r3, r3, r2
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	011c      	lsls	r4, r3, #4
 8005966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005970:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	1891      	adds	r1, r2, r2
 800597e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005980:	415b      	adcs	r3, r3
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005988:	4641      	mov	r1, r8
 800598a:	eb12 0a01 	adds.w	sl, r2, r1
 800598e:	4649      	mov	r1, r9
 8005990:	eb43 0b01 	adc.w	fp, r3, r1
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059a8:	4692      	mov	sl, r2
 80059aa:	469b      	mov	fp, r3
 80059ac:	4643      	mov	r3, r8
 80059ae:	eb1a 0303 	adds.w	r3, sl, r3
 80059b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b6:	464b      	mov	r3, r9
 80059b8:	eb4b 0303 	adc.w	r3, fp, r3
 80059bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059d4:	460b      	mov	r3, r1
 80059d6:	18db      	adds	r3, r3, r3
 80059d8:	643b      	str	r3, [r7, #64]	; 0x40
 80059da:	4613      	mov	r3, r2
 80059dc:	eb42 0303 	adc.w	r3, r2, r3
 80059e0:	647b      	str	r3, [r7, #68]	; 0x44
 80059e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059ea:	f7fa fc09 	bl	8000200 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	4b3b      	ldr	r3, [pc, #236]	; (8005ae4 <UART_SetConfig+0x2d4>)
 80059f6:	fba3 2301 	umull	r2, r3, r3, r1
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	2264      	movs	r2, #100	; 0x64
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	1acb      	subs	r3, r1, r3
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <UART_SetConfig+0x2d4>)
 8005a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a18:	441c      	add	r4, r3
 8005a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	1891      	adds	r1, r2, r2
 8005a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a34:	415b      	adcs	r3, r3
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a3c:	4641      	mov	r1, r8
 8005a3e:	1851      	adds	r1, r2, r1
 8005a40:	6339      	str	r1, [r7, #48]	; 0x30
 8005a42:	4649      	mov	r1, r9
 8005a44:	414b      	adcs	r3, r1
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a54:	4659      	mov	r1, fp
 8005a56:	00cb      	lsls	r3, r1, #3
 8005a58:	4651      	mov	r1, sl
 8005a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5e:	4651      	mov	r1, sl
 8005a60:	00ca      	lsls	r2, r1, #3
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005aa6:	f7fa fbab 	bl	8000200 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <UART_SetConfig+0x2d4>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	; 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3332      	adds	r3, #50	; 0x32
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <UART_SetConfig+0x2d4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 0207 	and.w	r2, r3, #7
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4422      	add	r2, r4
 8005ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ad8:	e105      	b.n	8005ce6 <UART_SetConfig+0x4d6>
 8005ada:	bf00      	nop
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	40011400 	.word	0x40011400
 8005ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005afa:	4642      	mov	r2, r8
 8005afc:	464b      	mov	r3, r9
 8005afe:	1891      	adds	r1, r2, r2
 8005b00:	6239      	str	r1, [r7, #32]
 8005b02:	415b      	adcs	r3, r3
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	1854      	adds	r4, r2, r1
 8005b0e:	4649      	mov	r1, r9
 8005b10:	eb43 0501 	adc.w	r5, r3, r1
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	00eb      	lsls	r3, r5, #3
 8005b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b22:	00e2      	lsls	r2, r4, #3
 8005b24:	4614      	mov	r4, r2
 8005b26:	461d      	mov	r5, r3
 8005b28:	4643      	mov	r3, r8
 8005b2a:	18e3      	adds	r3, r4, r3
 8005b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b30:	464b      	mov	r3, r9
 8005b32:	eb45 0303 	adc.w	r3, r5, r3
 8005b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b56:	4629      	mov	r1, r5
 8005b58:	008b      	lsls	r3, r1, #2
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b60:	4621      	mov	r1, r4
 8005b62:	008a      	lsls	r2, r1, #2
 8005b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b68:	f7fa fb4a 	bl	8000200 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4b60      	ldr	r3, [pc, #384]	; (8005cf4 <UART_SetConfig+0x4e4>)
 8005b72:	fba3 2302 	umull	r2, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	011c      	lsls	r4, r3, #4
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	1891      	adds	r1, r2, r2
 8005b92:	61b9      	str	r1, [r7, #24]
 8005b94:	415b      	adcs	r3, r3
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	1851      	adds	r1, r2, r1
 8005ba0:	6139      	str	r1, [r7, #16]
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	414b      	adcs	r3, r1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	00cb      	lsls	r3, r1, #3
 8005bb8:	4651      	mov	r1, sl
 8005bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	00ca      	lsls	r2, r1, #3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4642      	mov	r2, r8
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	460a      	mov	r2, r1
 8005bd4:	eb42 0303 	adc.w	r3, r2, r3
 8005bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	008b      	lsls	r3, r1, #2
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bfe:	4641      	mov	r1, r8
 8005c00:	008a      	lsls	r2, r1, #2
 8005c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c06:	f7fa fafb 	bl	8000200 <__aeabi_uldivmod>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4b39      	ldr	r3, [pc, #228]	; (8005cf4 <UART_SetConfig+0x4e4>)
 8005c10:	fba3 1302 	umull	r1, r3, r3, r2
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	2164      	movs	r1, #100	; 0x64
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	3332      	adds	r3, #50	; 0x32
 8005c22:	4a34      	ldr	r2, [pc, #208]	; (8005cf4 <UART_SetConfig+0x4e4>)
 8005c24:	fba2 2303 	umull	r2, r3, r2, r3
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c2e:	441c      	add	r4, r3
 8005c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c34:	2200      	movs	r2, #0
 8005c36:	673b      	str	r3, [r7, #112]	; 0x70
 8005c38:	677a      	str	r2, [r7, #116]	; 0x74
 8005c3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c3e:	4642      	mov	r2, r8
 8005c40:	464b      	mov	r3, r9
 8005c42:	1891      	adds	r1, r2, r2
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	415b      	adcs	r3, r3
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c4e:	4641      	mov	r1, r8
 8005c50:	1851      	adds	r1, r2, r1
 8005c52:	6039      	str	r1, [r7, #0]
 8005c54:	4649      	mov	r1, r9
 8005c56:	414b      	adcs	r3, r1
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c66:	4659      	mov	r1, fp
 8005c68:	00cb      	lsls	r3, r1, #3
 8005c6a:	4651      	mov	r1, sl
 8005c6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c70:	4651      	mov	r1, sl
 8005c72:	00ca      	lsls	r2, r1, #3
 8005c74:	4610      	mov	r0, r2
 8005c76:	4619      	mov	r1, r3
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	189b      	adds	r3, r3, r2
 8005c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	663b      	str	r3, [r7, #96]	; 0x60
 8005c94:	667a      	str	r2, [r7, #100]	; 0x64
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	008b      	lsls	r3, r1, #2
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cac:	4641      	mov	r1, r8
 8005cae:	008a      	lsls	r2, r1, #2
 8005cb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cb4:	f7fa faa4 	bl	8000200 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <UART_SetConfig+0x4e4>)
 8005cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2164      	movs	r1, #100	; 0x64
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	3332      	adds	r3, #50	; 0x32
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <UART_SetConfig+0x4e4>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4422      	add	r2, r4
 8005ce4:	609a      	str	r2, [r3, #8]
}
 8005ce6:	bf00      	nop
 8005ce8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cec:	46bd      	mov	sp, r7
 8005cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf2:	bf00      	nop
 8005cf4:	51eb851f 	.word	0x51eb851f

08005cf8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d123      	bne.n	8005d52 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	6851      	ldr	r1, [r2, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	6892      	ldr	r2, [r2, #8]
 8005d1e:	4311      	orrs	r1, r2
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	68d2      	ldr	r2, [r2, #12]
 8005d24:	4311      	orrs	r1, r2
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	6912      	ldr	r2, [r2, #16]
 8005d2a:	4311      	orrs	r1, r2
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	6952      	ldr	r2, [r2, #20]
 8005d30:	4311      	orrs	r1, r2
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	6992      	ldr	r2, [r2, #24]
 8005d36:	4311      	orrs	r1, r2
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	69d2      	ldr	r2, [r2, #28]
 8005d3c:	4311      	orrs	r1, r2
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	6a12      	ldr	r2, [r2, #32]
 8005d42:	4311      	orrs	r1, r2
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e028      	b.n	8005da4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	69d9      	ldr	r1, [r3, #28]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4319      	orrs	r1, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	6851      	ldr	r1, [r2, #4]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	6892      	ldr	r2, [r2, #8]
 8005d84:	4311      	orrs	r1, r2
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	68d2      	ldr	r2, [r2, #12]
 8005d8a:	4311      	orrs	r1, r2
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	6912      	ldr	r2, [r2, #16]
 8005d90:	4311      	orrs	r1, r2
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	6952      	ldr	r2, [r2, #20]
 8005d96:	4311      	orrs	r1, r2
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	6992      	ldr	r2, [r2, #24]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d128      	bne.n	8005e16 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	1e59      	subs	r1, r3, #1
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	4319      	orrs	r1, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	4319      	orrs	r1, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	4319      	orrs	r1, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	4319      	orrs	r1, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	051b      	lsls	r3, r3, #20
 8005e02:	4319      	orrs	r1, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	e02f      	b.n	8005e76 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	68d2      	ldr	r2, [r2, #12]
 8005e26:	3a01      	subs	r2, #1
 8005e28:	0311      	lsls	r1, r2, #12
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	6952      	ldr	r2, [r2, #20]
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	0512      	lsls	r2, r2, #20
 8005e32:	430a      	orrs	r2, r1
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1e59      	subs	r1, r3, #1
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	4319      	orrs	r1, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	4319      	orrs	r1, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	4319      	orrs	r1, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f043 0201 	orr.w	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 0201 	bic.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <USB_FlushTxFifo+0x64>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d901      	bls.n	8005ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e01b      	b.n	8005f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	daf2      	bge.n	8005ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	019b      	lsls	r3, r3, #6
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <USB_FlushTxFifo+0x64>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e006      	b.n	8005f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d0f0      	beq.n	8005f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00030d40 	.word	0x00030d40

08005f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <USB_FlushRxFifo+0x5c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e018      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	daf2      	bge.n	8005f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <USB_FlushRxFifo+0x5c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e006      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d0f0      	beq.n	8005f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	00030d40 	.word	0x00030d40

08005f90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b08b      	sub	sp, #44	; 0x2c
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	089b      	lsrs	r3, r3, #2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	e014      	b.n	8005fe6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3301      	adds	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	3301      	adds	r3, #1
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	6a3a      	ldr	r2, [r7, #32]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d3e6      	bcc.n	8005fbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fee:	8bfb      	ldrh	r3, [r7, #30]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01e      	beq.n	8006032 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffe:	461a      	mov	r2, r3
 8006000:	f107 0310 	add.w	r3, r7, #16
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	701a      	strb	r2, [r3, #0]
      i++;
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	3301      	adds	r3, #1
 800601e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	3301      	adds	r3, #1
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006026:	8bfb      	ldrh	r3, [r7, #30]
 8006028:	3b01      	subs	r3, #1
 800602a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800602c:	8bfb      	ldrh	r3, [r7, #30]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1ea      	bne.n	8006008 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006034:	4618      	mov	r0, r3
 8006036:	372c      	adds	r7, #44	; 0x2c
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d107      	bne.n	80060d4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ca:	461a      	mov	r2, r3
 80060cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060d0:	6053      	str	r3, [r2, #4]
 80060d2:	e009      	b.n	80060e8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d106      	bne.n	80060e8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e0:	461a      	mov	r2, r3
 80060e2:	f241 7370 	movw	r3, #6000	; 0x1770
 80060e6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	b29b      	uxth	r3, r3
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	0c9b      	lsrs	r3, r3, #18
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	0fdb      	lsrs	r3, r3, #31
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d104      	bne.n	8006172 <USB_HC_Halt+0x5a>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	e0c8      	b.n	8006304 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <USB_HC_Halt+0x66>
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d163      	bne.n	8006246 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800619c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 80ab 	bne.w	8006302 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d133      	bne.n	8006220 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006204:	d81d      	bhi.n	8006242 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621c:	d0ec      	beq.n	80061f8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800621e:	e070      	b.n	8006302 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006240:	e05f      	b.n	8006302 <USB_HC_Halt+0x1ea>
            break;
 8006242:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006244:	e05d      	b.n	8006302 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006264:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d133      	bne.n	80062de <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	440a      	add	r2, r1
 800628c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006294:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c2:	d81d      	bhi.n	8006300 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062da:	d0ec      	beq.n	80062b6 <USB_HC_Halt+0x19e>
 80062dc:	e011      	b.n	8006302 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e000      	b.n	8006302 <USB_HC_Halt+0x1ea>
          break;
 8006300:	bf00      	nop
    }
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3724      	adds	r7, #36	; 0x24
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fdbe 	bl	8005ea6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800632a:	2110      	movs	r1, #16
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff fdcb 	bl	8005ec8 <USB_FlushTxFifo>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fdf7 	bl	8005f30 <USB_FlushRxFifo>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e01f      	b.n	8006392 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006368:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006370:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006378:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	461a      	mov	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	3301      	adds	r3, #1
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d9dc      	bls.n	8006352 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e034      	b.n	8006408 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d2:	461a      	mov	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e4:	d80c      	bhi.n	8006400 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fc:	d0ec      	beq.n	80063d8 <USB_StopHost+0xc8>
 80063fe:	e000      	b.n	8006402 <USB_StopHost+0xf2>
        break;
 8006400:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3301      	adds	r3, #1
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b0f      	cmp	r3, #15
 800640c:	d9c7      	bls.n	800639e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006414:	461a      	mov	r2, r3
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
 8006422:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fd2d 	bl	8005e84 <USB_EnableGlobalInt>

  return ret;
 800642a:	7ffb      	ldrb	r3, [r7, #31]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f804 	bl	8006458 <USBH_HandleSof>
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b0b      	cmp	r3, #11
 8006468:	d10a      	bne.n	8006480 <USBH_HandleSof+0x28>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
  }
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80064ac:	2200      	movs	r2, #0
 80064ae:	4619      	mov	r1, r3
 80064b0:	f000 f8ae 	bl	8006610 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80064b4:	bf00      	nop
}
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80064cc:	bf00      	nop
}
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800650c:	2200      	movs	r2, #0
 800650e:	4619      	mov	r1, r3
 8006510:	f000 f87e 	bl	8006610 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 f914 	bl	800776c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f830 	bl	80065b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	795b      	ldrb	r3, [r3, #5]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f82a 	bl	80065b0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006570:	2200      	movs	r2, #0
 8006572:	4619      	mov	r1, r3
 8006574:	f000 f84c 	bl	8006610 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800659e:	2200      	movs	r2, #0
 80065a0:	4619      	mov	r1, r3
 80065a2:	f000 f835 	bl	8006610 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b0f      	cmp	r3, #15
 80065c0:	d80d      	bhi.n	80065de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	33e0      	adds	r3, #224	; 0xe0
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	33e0      	adds	r3, #224	; 0xe0
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f2:	f3ef 8305 	mrs	r3, IPSR
 80065f6:	607b      	str	r3, [r7, #4]
  return(result);
 80065f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <osMessagePut+0x1e>
    ticks = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800662e:	f7ff ffdd 	bl	80065ec <inHandlerMode>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d018      	beq.n	800666a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006638:	f107 0210 	add.w	r2, r7, #16
 800663c:	f107 0108 	add.w	r1, r7, #8
 8006640:	2300      	movs	r3, #0
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f9aa 	bl	800699c <xQueueGenericSendFromISR>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d001      	beq.n	8006652 <osMessagePut+0x42>
      return osErrorOS;
 800664e:	23ff      	movs	r3, #255	; 0xff
 8006650:	e018      	b.n	8006684 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d014      	beq.n	8006682 <osMessagePut+0x72>
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <osMessagePut+0x7c>)
 800665a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	e00b      	b.n	8006682 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800666a:	f107 0108 	add.w	r1, r7, #8
 800666e:	2300      	movs	r3, #0
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f894 	bl	80067a0 <xQueueGenericSend>
 8006678:	4603      	mov	r3, r0
 800667a:	2b01      	cmp	r3, #1
 800667c:	d001      	beq.n	8006682 <osMessagePut+0x72>
      return osErrorOS;
 800667e:	23ff      	movs	r3, #255	; 0xff
 8006680:	e000      	b.n	8006684 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d103      	bne.n	80066f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e00c      	b.n	8006712 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3308      	adds	r3, #8
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e002      	b.n	8006706 <vListInsert+0x2e>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	d2f6      	bcs.n	8006700 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6892      	ldr	r2, [r2, #8]
 8006760:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6852      	ldr	r2, [r2, #4]
 800676a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d103      	bne.n	800677e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	1e5a      	subs	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08e      	sub	sp, #56	; 0x38
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067ae:	2300      	movs	r3, #0
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <xQueueGenericSend+0x40>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <xQueueGenericSend+0x44>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <xQueueGenericSend+0x46>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <xQueueGenericSend+0x60>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d103      	bne.n	800680e <xQueueGenericSend+0x6e>
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <xQueueGenericSend+0x72>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <xQueueGenericSend+0x74>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericSend+0x8e>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	623b      	str	r3, [r7, #32]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800682e:	f000 fd31 	bl	8007294 <xTaskGetSchedulerState>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <xQueueGenericSend+0x9e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <xQueueGenericSend+0xa2>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueGenericSend+0xa4>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueGenericSend+0xbe>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	61fb      	str	r3, [r7, #28]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800685e:	f000 fe3b 	bl	80074d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <xQueueGenericSend+0xd4>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d129      	bne.n	80068c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800687a:	f000 f92a 	bl	8006ad2 <prvCopyDataToQueue>
 800687e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d010      	beq.n	80068aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	3324      	adds	r3, #36	; 0x24
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fbfb 	bl	8007088 <xTaskRemoveFromEventList>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006898:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <xQueueGenericSend+0x1f8>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	e00a      	b.n	80068c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068b0:	4b39      	ldr	r3, [pc, #228]	; (8006998 <xQueueGenericSend+0x1f8>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068c0:	f000 fe3a 	bl	8007538 <vPortExitCritical>
				return pdPASS;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e063      	b.n	8006990 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068ce:	f000 fe33 	bl	8007538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e05c      	b.n	8006990 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068dc:	f107 0314 	add.w	r3, r7, #20
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fc33 	bl	800714c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068e6:	2301      	movs	r3, #1
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068ea:	f000 fe25 	bl	8007538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068ee:	f000 f9c5 	bl	8006c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068f2:	f000 fdf1 	bl	80074d8 <vPortEnterCritical>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d103      	bne.n	800690c <xQueueGenericSend+0x16c>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006912:	b25b      	sxtb	r3, r3
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d103      	bne.n	8006922 <xQueueGenericSend+0x182>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006922:	f000 fe09 	bl	8007538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006926:	1d3a      	adds	r2, r7, #4
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fc22 	bl	8007178 <xTaskCheckForTimeOut>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d124      	bne.n	8006984 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800693a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800693c:	f000 f985 	bl	8006c4a <prvIsQueueFull>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d018      	beq.n	8006978 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	3310      	adds	r3, #16
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4611      	mov	r1, r2
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb76 	bl	8007040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006956:	f000 f926 	bl	8006ba6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800695a:	f000 f99d 	bl	8006c98 <xTaskResumeAll>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f47f af7c 	bne.w	800685e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <xQueueGenericSend+0x1f8>)
 8006968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	e772      	b.n	800685e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697a:	f000 f914 	bl	8006ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800697e:	f000 f98b 	bl	8006c98 <xTaskResumeAll>
 8006982:	e76c      	b.n	800685e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006986:	f000 f90e 	bl	8006ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800698a:	f000 f985 	bl	8006c98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800698e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006990:	4618      	mov	r0, r3
 8006992:	3738      	adds	r7, #56	; 0x38
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b090      	sub	sp, #64	; 0x40
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <xQueueGenericSendFromISR+0x3c>
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <xQueueGenericSendFromISR+0x40>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <xQueueGenericSendFromISR+0x42>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <xQueueGenericSendFromISR+0x6a>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <xQueueGenericSendFromISR+0x6e>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericSendFromISR+0x70>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	623b      	str	r3, [r7, #32]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a26:	f000 fe09 	bl	800763c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a2a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	61fa      	str	r2, [r7, #28]
 8006a40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d302      	bcc.n	8006a58 <xQueueGenericSendFromISR+0xbc>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d12f      	bne.n	8006ab8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a6e:	f000 f830 	bl	8006ad2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d112      	bne.n	8006aa2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d016      	beq.n	8006ab2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	3324      	adds	r3, #36	; 0x24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fafd 	bl	8007088 <xTaskRemoveFromEventList>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	e007      	b.n	8006ab2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	b25a      	sxtb	r2, r3
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006ab6:	e001      	b.n	8006abc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ac6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3740      	adds	r7, #64	; 0x40
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10d      	bne.n	8006b0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d14d      	bne.n	8006b94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fbe7 	bl	80072d0 <xTaskPriorityDisinherit>
 8006b02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	e043      	b.n	8006b94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d119      	bne.n	8006b46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6858      	ldr	r0, [r3, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	f000 fe91 	bl	8007844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	441a      	add	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d32b      	bcc.n	8006b94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	e026      	b.n	8006b94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68d8      	ldr	r0, [r3, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	f000 fe77 	bl	8007844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	425b      	negs	r3, r3
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d207      	bcs.n	8006b82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	425b      	negs	r3, r3
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d105      	bne.n	8006b94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b9c:	697b      	ldr	r3, [r7, #20]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bae:	f000 fc93 	bl	80074d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bba:	e011      	b.n	8006be0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d012      	beq.n	8006bea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3324      	adds	r3, #36	; 0x24
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fa5d 	bl	8007088 <xTaskRemoveFromEventList>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bd4:	f000 fb32 	bl	800723c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dce9      	bgt.n	8006bbc <prvUnlockQueue+0x16>
 8006be8:	e000      	b.n	8006bec <prvUnlockQueue+0x46>
					break;
 8006bea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006bf4:	f000 fca0 	bl	8007538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bf8:	f000 fc6e 	bl	80074d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c04:	e011      	b.n	8006c2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d012      	beq.n	8006c34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3310      	adds	r3, #16
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fa38 	bl	8007088 <xTaskRemoveFromEventList>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c1e:	f000 fb0d 	bl	800723c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dce9      	bgt.n	8006c06 <prvUnlockQueue+0x60>
 8006c32:	e000      	b.n	8006c36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	22ff      	movs	r2, #255	; 0xff
 8006c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c3e:	f000 fc7b 	bl	8007538 <vPortExitCritical>
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c52:	f000 fc41 	bl	80074d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d102      	bne.n	8006c68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c62:	2301      	movs	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e001      	b.n	8006c6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c6c:	f000 fc64 	bl	8007538 <vPortExitCritical>

	return xReturn;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <vTaskSuspendAll+0x18>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a03      	ldr	r2, [pc, #12]	; (8006c94 <vTaskSuspendAll+0x18>)
 8006c88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c8a:	bf00      	nop
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000404 	.word	0x20000404

08006c98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <xTaskResumeAll+0x114>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	603b      	str	r3, [r7, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cc4:	f000 fc08 	bl	80074d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cc8:	4b38      	ldr	r3, [pc, #224]	; (8006dac <xTaskResumeAll+0x114>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4a37      	ldr	r2, [pc, #220]	; (8006dac <xTaskResumeAll+0x114>)
 8006cd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <xTaskResumeAll+0x114>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d161      	bne.n	8006d9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cda:	4b35      	ldr	r3, [pc, #212]	; (8006db0 <xTaskResumeAll+0x118>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d05d      	beq.n	8006d9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ce2:	e02e      	b.n	8006d42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce4:	4b33      	ldr	r3, [pc, #204]	; (8006db4 <xTaskResumeAll+0x11c>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3318      	adds	r3, #24
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fd2a 	bl	800674a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fd25 	bl	800674a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	2201      	movs	r2, #1
 8006d06:	409a      	lsls	r2, r3
 8006d08:	4b2b      	ldr	r3, [pc, #172]	; (8006db8 <xTaskResumeAll+0x120>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <xTaskResumeAll+0x120>)
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4a27      	ldr	r2, [pc, #156]	; (8006dbc <xTaskResumeAll+0x124>)
 8006d20:	441a      	add	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7ff fcb1 	bl	8006690 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d32:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <xTaskResumeAll+0x128>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d302      	bcc.n	8006d42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d3c:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <xTaskResumeAll+0x12c>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d42:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <xTaskResumeAll+0x11c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1cc      	bne.n	8006ce4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d50:	f000 fa80 	bl	8007254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d54:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <xTaskResumeAll+0x130>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d60:	f000 f836 	bl	8006dd0 <xTaskIncrementTick>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d6a:	4b16      	ldr	r3, [pc, #88]	; (8006dc4 <xTaskResumeAll+0x12c>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f1      	bne.n	8006d60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <xTaskResumeAll+0x130>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d82:	4b10      	ldr	r3, [pc, #64]	; (8006dc4 <xTaskResumeAll+0x12c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <xTaskResumeAll+0x134>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d9e:	f000 fbcb 	bl	8007538 <vPortExitCritical>

	return xAlreadyYielded;
 8006da2:	68bb      	ldr	r3, [r7, #8]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000404 	.word	0x20000404
 8006db0:	200003e4 	.word	0x200003e4
 8006db4:	200003bc 	.word	0x200003bc
 8006db8:	200003ec 	.word	0x200003ec
 8006dbc:	20000328 	.word	0x20000328
 8006dc0:	20000324 	.word	0x20000324
 8006dc4:	200003f8 	.word	0x200003f8
 8006dc8:	200003f4 	.word	0x200003f4
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dda:	4b4e      	ldr	r3, [pc, #312]	; (8006f14 <xTaskIncrementTick+0x144>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 808e 	bne.w	8006f00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006de4:	4b4c      	ldr	r3, [pc, #304]	; (8006f18 <xTaskIncrementTick+0x148>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dec:	4a4a      	ldr	r2, [pc, #296]	; (8006f18 <xTaskIncrementTick+0x148>)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d120      	bne.n	8006e3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006df8:	4b48      	ldr	r3, [pc, #288]	; (8006f1c <xTaskIncrementTick+0x14c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	603b      	str	r3, [r7, #0]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xTaskIncrementTick+0x46>
 8006e18:	4b40      	ldr	r3, [pc, #256]	; (8006f1c <xTaskIncrementTick+0x14c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	4b40      	ldr	r3, [pc, #256]	; (8006f20 <xTaskIncrementTick+0x150>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a3e      	ldr	r2, [pc, #248]	; (8006f1c <xTaskIncrementTick+0x14c>)
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	4a3e      	ldr	r2, [pc, #248]	; (8006f20 <xTaskIncrementTick+0x150>)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	4b3d      	ldr	r3, [pc, #244]	; (8006f24 <xTaskIncrementTick+0x154>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	4a3c      	ldr	r2, [pc, #240]	; (8006f24 <xTaskIncrementTick+0x154>)
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	f000 fa0d 	bl	8007254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e3a:	4b3b      	ldr	r3, [pc, #236]	; (8006f28 <xTaskIncrementTick+0x158>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d348      	bcc.n	8006ed6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e44:	4b35      	ldr	r3, [pc, #212]	; (8006f1c <xTaskIncrementTick+0x14c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <xTaskIncrementTick+0x158>)
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	601a      	str	r2, [r3, #0]
					break;
 8006e56:	e03e      	b.n	8006ed6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e58:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <xTaskIncrementTick+0x14c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d203      	bcs.n	8006e78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e70:	4a2d      	ldr	r2, [pc, #180]	; (8006f28 <xTaskIncrementTick+0x158>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e76:	e02e      	b.n	8006ed6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fc64 	bl	800674a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3318      	adds	r3, #24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fc5b 	bl	800674a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	2201      	movs	r2, #1
 8006e9a:	409a      	lsls	r2, r3
 8006e9c:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <xTaskIncrementTick+0x15c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <xTaskIncrementTick+0x15c>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <xTaskIncrementTick+0x160>)
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f7ff fbe7 	bl	8006690 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	4b1b      	ldr	r3, [pc, #108]	; (8006f34 <xTaskIncrementTick+0x164>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d3b9      	bcc.n	8006e44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed4:	e7b6      	b.n	8006e44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ed6:	4b17      	ldr	r3, [pc, #92]	; (8006f34 <xTaskIncrementTick+0x164>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	4914      	ldr	r1, [pc, #80]	; (8006f30 <xTaskIncrementTick+0x160>)
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d901      	bls.n	8006ef2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ef2:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <xTaskIncrementTick+0x168>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e004      	b.n	8006f0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f00:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <xTaskIncrementTick+0x16c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <xTaskIncrementTick+0x16c>)
 8006f08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f0a:	697b      	ldr	r3, [r7, #20]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000404 	.word	0x20000404
 8006f18:	200003e8 	.word	0x200003e8
 8006f1c:	200003b4 	.word	0x200003b4
 8006f20:	200003b8 	.word	0x200003b8
 8006f24:	200003fc 	.word	0x200003fc
 8006f28:	20000400 	.word	0x20000400
 8006f2c:	200003ec 	.word	0x200003ec
 8006f30:	20000328 	.word	0x20000328
 8006f34:	20000324 	.word	0x20000324
 8006f38:	200003f8 	.word	0x200003f8
 8006f3c:	200003f4 	.word	0x200003f4

08006f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f46:	4b39      	ldr	r3, [pc, #228]	; (800702c <vTaskSwitchContext+0xec>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f4e:	4b38      	ldr	r3, [pc, #224]	; (8007030 <vTaskSwitchContext+0xf0>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f54:	e066      	b.n	8007024 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8006f56:	4b36      	ldr	r3, [pc, #216]	; (8007030 <vTaskSwitchContext+0xf0>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006f5c:	4b35      	ldr	r3, [pc, #212]	; (8007034 <vTaskSwitchContext+0xf4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d111      	bne.n	8006f98 <vTaskSwitchContext+0x58>
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	3304      	adds	r3, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d10b      	bne.n	8006f98 <vTaskSwitchContext+0x58>
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	3308      	adds	r3, #8
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d105      	bne.n	8006f98 <vTaskSwitchContext+0x58>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	330c      	adds	r3, #12
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d008      	beq.n	8006faa <vTaskSwitchContext+0x6a>
 8006f98:	4b26      	ldr	r3, [pc, #152]	; (8007034 <vTaskSwitchContext+0xf4>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	4b25      	ldr	r3, [pc, #148]	; (8007034 <vTaskSwitchContext+0xf4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3334      	adds	r3, #52	; 0x34
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7f9 faad 	bl	8000504 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <vTaskSwitchContext+0xf8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	fab3 f383 	clz	r3, r3
 8006fb6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	f1c3 031f 	rsb	r3, r3, #31
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	491e      	ldr	r1, [pc, #120]	; (800703c <vTaskSwitchContext+0xfc>)
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <vTaskSwitchContext+0xaa>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	607b      	str	r3, [r7, #4]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <vTaskSwitchContext+0xa8>
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a11      	ldr	r2, [pc, #68]	; (800703c <vTaskSwitchContext+0xfc>)
 8006ff6:	4413      	add	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	605a      	str	r2, [r3, #4]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	3308      	adds	r3, #8
 800700c:	429a      	cmp	r2, r3
 800700e:	d104      	bne.n	800701a <vTaskSwitchContext+0xda>
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	4a04      	ldr	r2, [pc, #16]	; (8007034 <vTaskSwitchContext+0xf4>)
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000404 	.word	0x20000404
 8007030:	200003f8 	.word	0x200003f8
 8007034:	20000324 	.word	0x20000324
 8007038:	200003ec 	.word	0x200003ec
 800703c:	20000328 	.word	0x20000328

08007040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <vTaskPlaceOnEventList+0x44>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3318      	adds	r3, #24
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fb32 	bl	80066d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007074:	2101      	movs	r1, #1
 8007076:	6838      	ldr	r0, [r7, #0]
 8007078:	f000 f9b0 	bl	80073dc <prvAddCurrentTaskToDelayedList>
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000324 	.word	0x20000324

08007088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	60fb      	str	r3, [r7, #12]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3318      	adds	r3, #24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fb46 	bl	800674a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070be:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <xTaskRemoveFromEventList+0xac>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d11c      	bne.n	8007100 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fb3d 	bl	800674a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	2201      	movs	r2, #1
 80070d6:	409a      	lsls	r2, r3
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <xTaskRemoveFromEventList+0xb0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4313      	orrs	r3, r2
 80070de:	4a16      	ldr	r2, [pc, #88]	; (8007138 <xTaskRemoveFromEventList+0xb0>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <xTaskRemoveFromEventList+0xb4>)
 80070f0:	441a      	add	r2, r3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7ff fac9 	bl	8006690 <vListInsertEnd>
 80070fe:	e005      	b.n	800710c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3318      	adds	r3, #24
 8007104:	4619      	mov	r1, r3
 8007106:	480e      	ldr	r0, [pc, #56]	; (8007140 <xTaskRemoveFromEventList+0xb8>)
 8007108:	f7ff fac2 	bl	8006690 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <xTaskRemoveFromEventList+0xbc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	429a      	cmp	r2, r3
 8007118:	d905      	bls.n	8007126 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <xTaskRemoveFromEventList+0xc0>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e001      	b.n	800712a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000404 	.word	0x20000404
 8007138:	200003ec 	.word	0x200003ec
 800713c:	20000328 	.word	0x20000328
 8007140:	200003bc 	.word	0x200003bc
 8007144:	20000324 	.word	0x20000324
 8007148:	200003f8 	.word	0x200003f8

0800714c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <vTaskInternalSetTimeOutState+0x24>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <vTaskInternalSetTimeOutState+0x28>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	605a      	str	r2, [r3, #4]
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	200003fc 	.word	0x200003fc
 8007174:	200003e8 	.word	0x200003e8

08007178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	613b      	str	r3, [r7, #16]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60fb      	str	r3, [r7, #12]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80071ba:	f000 f98d 	bl	80074d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071be:	4b1d      	ldr	r3, [pc, #116]	; (8007234 <xTaskCheckForTimeOut+0xbc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d102      	bne.n	80071de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	e023      	b.n	8007226 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b15      	ldr	r3, [pc, #84]	; (8007238 <xTaskCheckForTimeOut+0xc0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d007      	beq.n	80071fa <xTaskCheckForTimeOut+0x82>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e015      	b.n	8007226 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d20b      	bcs.n	800721c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff9b 	bl	800714c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	e004      	b.n	8007226 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007226:	f000 f987 	bl	8007538 <vPortExitCritical>

	return xReturn;
 800722a:	69fb      	ldr	r3, [r7, #28]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	200003e8 	.word	0x200003e8
 8007238:	200003fc 	.word	0x200003fc

0800723c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <vTaskMissedYield+0x14>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	200003f8 	.word	0x200003f8

08007254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvResetNextTaskUnblockTime+0x38>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <prvResetNextTaskUnblockTime+0x3c>)
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800726c:	e008      	b.n	8007280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <prvResetNextTaskUnblockTime+0x38>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <prvResetNextTaskUnblockTime+0x3c>)
 800727e:	6013      	str	r3, [r2, #0]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	200003b4 	.word	0x200003b4
 8007290:	20000400 	.word	0x20000400

08007294 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800729a:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <xTaskGetSchedulerState+0x34>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072a2:	2301      	movs	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	e008      	b.n	80072ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <xTaskGetSchedulerState+0x38>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072b0:	2302      	movs	r3, #2
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	e001      	b.n	80072ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ba:	687b      	ldr	r3, [r7, #4]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	200003f0 	.word	0x200003f0
 80072cc:	20000404 	.word	0x20000404

080072d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d06e      	beq.n	80073c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072e6:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <xTaskPriorityDisinherit+0x100>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d00a      	beq.n	8007306 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	60bb      	str	r3, [r7, #8]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007328:	1e5a      	subs	r2, r3, #1
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007336:	429a      	cmp	r2, r3
 8007338:	d044      	beq.n	80073c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	2b00      	cmp	r3, #0
 8007340:	d140      	bne.n	80073c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3304      	adds	r3, #4
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff f9ff 	bl	800674a <uxListRemove>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d115      	bne.n	800737e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	491f      	ldr	r1, [pc, #124]	; (80073d4 <xTaskPriorityDisinherit+0x104>)
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xTaskPriorityDisinherit+0xae>
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	2201      	movs	r2, #1
 800736e:	fa02 f303 	lsl.w	r3, r2, r3
 8007372:	43da      	mvns	r2, r3
 8007374:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <xTaskPriorityDisinherit+0x108>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4013      	ands	r3, r2
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <xTaskPriorityDisinherit+0x108>)
 800737c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	f1c3 0207 	rsb	r2, r3, #7
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	2201      	movs	r2, #1
 8007398:	409a      	lsls	r2, r3
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <xTaskPriorityDisinherit+0x108>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4313      	orrs	r3, r2
 80073a0:	4a0d      	ldr	r2, [pc, #52]	; (80073d8 <xTaskPriorityDisinherit+0x108>)
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <xTaskPriorityDisinherit+0x104>)
 80073b2:	441a      	add	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7ff f968 	bl	8006690 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c4:	697b      	ldr	r3, [r7, #20]
	}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000324 	.word	0x20000324
 80073d4:	20000328 	.word	0x20000328
 80073d8:	200003ec 	.word	0x200003ec

080073dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073e6:	4b29      	ldr	r3, [pc, #164]	; (800748c <prvAddCurrentTaskToDelayedList+0xb0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ec:	4b28      	ldr	r3, [pc, #160]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3304      	adds	r3, #4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff f9a9 	bl	800674a <uxListRemove>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	2201      	movs	r2, #1
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43da      	mvns	r2, r3
 800740c:	4b21      	ldr	r3, [pc, #132]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4013      	ands	r3, r2
 8007412:	4a20      	ldr	r2, [pc, #128]	; (8007494 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007414:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d10a      	bne.n	8007434 <prvAddCurrentTaskToDelayedList+0x58>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007424:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3304      	adds	r3, #4
 800742a:	4619      	mov	r1, r3
 800742c:	481a      	ldr	r0, [pc, #104]	; (8007498 <prvAddCurrentTaskToDelayedList+0xbc>)
 800742e:	f7ff f92f 	bl	8006690 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007432:	e026      	b.n	8007482 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800743c:	4b14      	ldr	r3, [pc, #80]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	429a      	cmp	r2, r3
 800744a:	d209      	bcs.n	8007460 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800744c:	4b13      	ldr	r3, [pc, #76]	; (800749c <prvAddCurrentTaskToDelayedList+0xc0>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f7ff f93d 	bl	80066d8 <vListInsert>
}
 800745e:	e010      	b.n	8007482 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3304      	adds	r3, #4
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f7ff f933 	bl	80066d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007472:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d202      	bcs.n	8007482 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800747c:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6013      	str	r3, [r2, #0]
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200003e8 	.word	0x200003e8
 8007490:	20000324 	.word	0x20000324
 8007494:	200003ec 	.word	0x200003ec
 8007498:	200003d0 	.word	0x200003d0
 800749c:	200003b8 	.word	0x200003b8
 80074a0:	200003b4 	.word	0x200003b4
 80074a4:	20000400 	.word	0x20000400
	...

080074b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	607b      	str	r3, [r7, #4]
}
 80074f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <vPortEnterCritical+0x58>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <vPortEnterCritical+0x58>)
 80074fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074fc:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <vPortEnterCritical+0x58>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10f      	bne.n	8007524 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007504:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <vPortEnterCritical+0x5c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <vPortEnterCritical+0x4c>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	603b      	str	r3, [r7, #0]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <vPortEnterCritical+0x4a>
	}
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	2000000c 	.word	0x2000000c
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800753e:	4b12      	ldr	r3, [pc, #72]	; (8007588 <vPortExitCritical+0x50>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <vPortExitCritical+0x24>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	607b      	str	r3, [r7, #4]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <vPortExitCritical+0x50>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3b01      	subs	r3, #1
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <vPortExitCritical+0x50>)
 8007564:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007566:	4b08      	ldr	r3, [pc, #32]	; (8007588 <vPortExitCritical+0x50>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <vPortExitCritical+0x42>
 800756e:	2300      	movs	r3, #0
 8007570:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	f383 8811 	msr	BASEPRI, r3
}
 8007578:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000000c 	.word	0x2000000c
 800758c:	00000000 	.word	0x00000000

08007590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007590:	f3ef 8009 	mrs	r0, PSP
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <pxCurrentTCBConst>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	f01e 0f10 	tst.w	lr, #16
 80075a0:	bf08      	it	eq
 80075a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075aa:	6010      	str	r0, [r2, #0]
 80075ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075b4:	f380 8811 	msr	BASEPRI, r0
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f7ff fcbe 	bl	8006f40 <vTaskSwitchContext>
 80075c4:	f04f 0000 	mov.w	r0, #0
 80075c8:	f380 8811 	msr	BASEPRI, r0
 80075cc:	bc09      	pop	{r0, r3}
 80075ce:	6819      	ldr	r1, [r3, #0]
 80075d0:	6808      	ldr	r0, [r1, #0]
 80075d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d6:	f01e 0f10 	tst.w	lr, #16
 80075da:	bf08      	it	eq
 80075dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075e0:	f380 8809 	msr	PSP, r0
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	f3af 8000 	nop.w

080075f0 <pxCurrentTCBConst>:
 80075f0:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
}
 8007610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007612:	f7ff fbdd 	bl	8006dd0 <xTaskIncrementTick>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800761c:	4b06      	ldr	r3, [pc, #24]	; (8007638 <SysTick_Handler+0x40>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f383 8811 	msr	BASEPRI, r3
}
 800762e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007642:	f3ef 8305 	mrs	r3, IPSR
 8007646:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b0f      	cmp	r3, #15
 800764c:	d914      	bls.n	8007678 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800764e:	4a17      	ldr	r2, [pc, #92]	; (80076ac <vPortValidateInterruptPriority+0x70>)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <vPortValidateInterruptPriority+0x74>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	7afa      	ldrb	r2, [r7, #11]
 800765e:	429a      	cmp	r2, r3
 8007660:	d20a      	bcs.n	8007678 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	607b      	str	r3, [r7, #4]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <vPortValidateInterruptPriority+0x78>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <vPortValidateInterruptPriority+0x7c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d90a      	bls.n	800769e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	603b      	str	r3, [r7, #0]
}
 800769a:	bf00      	nop
 800769c:	e7fe      	b.n	800769c <vPortValidateInterruptPriority+0x60>
	}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	e000e3f0 	.word	0xe000e3f0
 80076b0:	20000408 	.word	0x20000408
 80076b4:	e000ed0c 	.word	0xe000ed0c
 80076b8:	2000040c 	.word	0x2000040c

080076bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe feb2 	bl	8006434 <USBH_LL_IncTimer>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fef6 	bl	80064d8 <USBH_LL_Connect>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe ff0b 	bl	800651e <USBH_LL_Disconnect>
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
 800771c:	4613      	mov	r3, r2
 800771e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe ff2b 	bl	8006582 <USBH_LL_NotifyURBChange>
#endif
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe fea0 	bl	8006488 <USBH_LL_PortEnabled>
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe feac 	bl	80064bc <USBH_LL_PortDisabled>
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007782:	4618      	mov	r0, r3
 8007784:	f7fa fde6 	bl	8002354 <HAL_HCD_Stop>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f808 	bl	80077a4 <USBH_Get_USB_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d817      	bhi.n	80077e8 <USBH_Get_USB_Status+0x44>
 80077b8:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <USBH_Get_USB_Status+0x1c>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077d7 	.word	0x080077d7
 80077c8:	080077dd 	.word	0x080077dd
 80077cc:	080077e3 	.word	0x080077e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
    break;
 80077d4:	e00b      	b.n	80077ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80077d6:	2302      	movs	r3, #2
 80077d8:	73fb      	strb	r3, [r7, #15]
    break;
 80077da:	e008      	b.n	80077ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
    break;
 80077e0:	e005      	b.n	80077ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	73fb      	strb	r3, [r7, #15]
    break;
 80077e6:	e002      	b.n	80077ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80077e8:	2302      	movs	r3, #2
 80077ea:	73fb      	strb	r3, [r7, #15]
    break;
 80077ec:	bf00      	nop
  }
  return usb_status;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <__libc_init_array>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4d0d      	ldr	r5, [pc, #52]	; (8007834 <__libc_init_array+0x38>)
 8007800:	4c0d      	ldr	r4, [pc, #52]	; (8007838 <__libc_init_array+0x3c>)
 8007802:	1b64      	subs	r4, r4, r5
 8007804:	10a4      	asrs	r4, r4, #2
 8007806:	2600      	movs	r6, #0
 8007808:	42a6      	cmp	r6, r4
 800780a:	d109      	bne.n	8007820 <__libc_init_array+0x24>
 800780c:	4d0b      	ldr	r5, [pc, #44]	; (800783c <__libc_init_array+0x40>)
 800780e:	4c0c      	ldr	r4, [pc, #48]	; (8007840 <__libc_init_array+0x44>)
 8007810:	f000 f82e 	bl	8007870 <_init>
 8007814:	1b64      	subs	r4, r4, r5
 8007816:	10a4      	asrs	r4, r4, #2
 8007818:	2600      	movs	r6, #0
 800781a:	42a6      	cmp	r6, r4
 800781c:	d105      	bne.n	800782a <__libc_init_array+0x2e>
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	f855 3b04 	ldr.w	r3, [r5], #4
 8007824:	4798      	blx	r3
 8007826:	3601      	adds	r6, #1
 8007828:	e7ee      	b.n	8007808 <__libc_init_array+0xc>
 800782a:	f855 3b04 	ldr.w	r3, [r5], #4
 800782e:	4798      	blx	r3
 8007830:	3601      	adds	r6, #1
 8007832:	e7f2      	b.n	800781a <__libc_init_array+0x1e>
 8007834:	080078b4 	.word	0x080078b4
 8007838:	080078b4 	.word	0x080078b4
 800783c:	080078b4 	.word	0x080078b4
 8007840:	080078b8 	.word	0x080078b8

08007844 <memcpy>:
 8007844:	440a      	add	r2, r1
 8007846:	4291      	cmp	r1, r2
 8007848:	f100 33ff 	add.w	r3, r0, #4294967295
 800784c:	d100      	bne.n	8007850 <memcpy+0xc>
 800784e:	4770      	bx	lr
 8007850:	b510      	push	{r4, lr}
 8007852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800785a:	4291      	cmp	r1, r2
 800785c:	d1f9      	bne.n	8007852 <memcpy+0xe>
 800785e:	bd10      	pop	{r4, pc}

08007860 <memset>:
 8007860:	4402      	add	r2, r0
 8007862:	4603      	mov	r3, r0
 8007864:	4293      	cmp	r3, r2
 8007866:	d100      	bne.n	800786a <memset+0xa>
 8007868:	4770      	bx	lr
 800786a:	f803 1b01 	strb.w	r1, [r3], #1
 800786e:	e7f9      	b.n	8007864 <memset+0x4>

08007870 <_init>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr

0800787c <_fini>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr
